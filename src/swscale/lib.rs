#![crate_id = "swscale#2"]
#![license = "MIT"]
#![crate_type = "dylib"]
/* automatically generated by rust-bindgen */
extern crate libc;
extern crate avutil;
use libc::{c_void,c_uint,c_int,uint8_t,c_double,c_schar,c_float,c_uchar};

pub type __int128_t = c_void;
pub type __uint128_t = c_void;
pub type __builtin_va_list = [__va_list_tag, ..1u];
pub struct Struct_SwsVector {
    pub coeff: *mut c_double,
    pub length: c_int,
}
pub type SwsVector = Struct_SwsVector;
pub struct Struct_SwsFilter {
    pub lumH: *mut SwsVector,
    pub lumV: *mut SwsVector,
    pub chrH: *mut SwsVector,
    pub chrV: *mut SwsVector,
}
pub type SwsFilter = Struct_SwsFilter;
pub type Struct_SwsContext = c_void;
pub type __va_list_tag = Struct___va_list_tag;
pub struct Struct___va_list_tag {
    pub gp_offset: c_uint,
    pub fp_offset: c_uint,
    pub overflow_arg_area: *mut c_void,
    pub reg_save_area: *mut c_void,
}
pub static SWS_FAST_BILINEAR: int = 1;
pub static SWS_BILINEAR: int = 2;
pub static SWS_BICUBIC: int = 4;
pub static SWS_X: int = 8;
pub static SWS_POINT: int = 0x10;
pub static SWS_AREA: int = 0x20;
pub static SWS_BICUBLIN: int = 0x40;
pub static SWS_GAUSS: int = 0x80;
pub static SWS_SINC: int = 0x100;
pub static SWS_LANCZOS: int = 0x200;
pub static SWS_SPLINE: int = 0x400;
pub static SWS_SRC_V_CHR_DROP_MASK: int = 0x30000;
pub static SWS_SRC_V_CHR_DROP_SHIFT: int = 16;
pub static SWS_PARAM_DEFAULT: int = 123456;
pub static SWS_PRINT_INFO: int = 0x1000;
pub static SWS_FULL_CHR_H_INT: int = 0x2000;
pub static SWS_FULL_CHR_H_INP: int = 0x4000;
pub static SWS_DIRECT_BGR: int = 0x8000;
pub static SWS_ACCURATE_RND: int = 0x40000;
pub static SWS_BITEXACT: int = 0x80000;
pub static SWS_MAX_REDUCE_CUTOFF: c_float = 0.002;
pub static SWS_CS_ITU709: int = 1;
pub static SWS_CS_FCC: int = 4;
pub static SWS_CS_ITU601: int = 5;
pub static SWS_CS_ITU624: int = 5;
pub static SWS_CS_SMPTE170M: int = 5;
pub static SWS_CS_SMPTE240M: int = 7;
pub static SWS_CS_DEFAULT: int = 5;
#[link(name = "swscale")]
extern "C" {
    pub fn swscale_version() -> c_uint;
    pub fn swscale_configuration() -> *c_schar;
    pub fn swscale_license() -> *c_schar;
    pub fn sws_getCoefficients(colorspace: c_int) -> *c_int;
    pub fn sws_isSupportedInput(pix_fmt: avutil::Enum_AVPixelFormat) -> c_int;
    pub fn sws_isSupportedOutput(pix_fmt: avutil::Enum_AVPixelFormat) -> c_int;
    pub fn sws_alloc_context() -> *mut Struct_SwsContext;
    pub fn sws_init_context(sws_context: *mut Struct_SwsContext,
                            srcFilter: *mut SwsFilter,
                            dstFilter: *mut SwsFilter) -> c_int;
    pub fn sws_freeContext(swsContext: *mut Struct_SwsContext);
    pub fn sws_getContext(srcW: c_int, srcH: c_int,
                          srcFormat: avutil::Enum_AVPixelFormat, dstW: c_int,
                          dstH: c_int, dstFormat: avutil::Enum_AVPixelFormat,
                          flags: c_int, srcFilter: *mut SwsFilter,
                          dstFilter: *mut SwsFilter, param: *c_double) ->
     *mut Struct_SwsContext;
    pub fn sws_scale(c: *mut Struct_SwsContext, srcSlice: **mut c_uchar,
                     srcStride: *c_int, srcSliceY: c_int, srcSliceH: c_int,
                     dst: *mut *c_uchar, dstStride: *c_int) -> c_int;
    pub fn sws_setColorspaceDetails(c: *mut Struct_SwsContext,
                                    inv_table: [c_int, ..4u], srcRange: c_int,
                                    table: [c_int, ..4u], dstRange: c_int,
                                    brightness: c_int, contrast: c_int,
                                    saturation: c_int) -> c_int;
    pub fn sws_getColorspaceDetails(c: *mut Struct_SwsContext,
                                    inv_table: *mut *mut c_int,
                                    srcRange: *mut c_int,
                                    table: *mut *mut c_int,
                                    dstRange: *mut c_int,
                                    brightness: *mut c_int,
                                    contrast: *mut c_int,
                                    saturation: *mut c_int) -> c_int;
    pub fn sws_allocVec(length: c_int) -> *mut SwsVector;
    pub fn sws_getGaussianVec(variance: c_double, quality: c_double) ->
     *mut SwsVector;
    pub fn sws_getConstVec(c: c_double, length: c_int) -> *mut SwsVector;
    pub fn sws_getIdentityVec() -> *mut SwsVector;
    pub fn sws_scaleVec(a: *mut SwsVector, scalar: c_double);
    pub fn sws_normalizeVec(a: *mut SwsVector, height: c_double);
    pub fn sws_convVec(a: *mut SwsVector, b: *mut SwsVector);
    pub fn sws_addVec(a: *mut SwsVector, b: *mut SwsVector);
    pub fn sws_subVec(a: *mut SwsVector, b: *mut SwsVector);
    pub fn sws_shiftVec(a: *mut SwsVector, shift: c_int);
    pub fn sws_cloneVec(a: *mut SwsVector) -> *mut SwsVector;
    pub fn sws_printVec2(a: *mut SwsVector, log_ctx: *mut avutil::AVClass,
                         log_level: c_int);
    pub fn sws_freeVec(a: *mut SwsVector);
    pub fn sws_getDefaultFilter(lumaGBlur: c_float, chromaGBlur: c_float,
                                lumaSharpen: c_float, chromaSharpen: c_float,
                                chromaHShift: c_float, chromaVShift: c_float,
                                verbose: c_int) -> *mut SwsFilter;
    pub fn sws_freeFilter(filter: *mut SwsFilter);
    pub fn sws_getCachedContext(context: *mut Struct_SwsContext, srcW: c_int,
                                srcH: c_int, srcFormat: avutil::Enum_AVPixelFormat,
                                dstW: c_int, dstH: c_int,
                                dstFormat: avutil::Enum_AVPixelFormat, flags: c_int,
                                srcFilter: *mut SwsFilter,
                                dstFilter: *mut SwsFilter, param: *c_double)
     -> *mut Struct_SwsContext;
    pub fn sws_convertPalette8ToPacked32(src: *uint8_t, dst: *mut uint8_t,
                                         num_pixels: c_int,
                                         palette: *uint8_t);
    pub fn sws_convertPalette8ToPacked24(src: *uint8_t, dst: *mut uint8_t,
                                         num_pixels: c_int,
                                         palette: *uint8_t);
    pub fn sws_get_class() -> *avutil::AVClass;
}

pub fn version() -> uint{
    unsafe {
        swscale_version() as uint
    }
}
pub fn license() -> ~str {
    unsafe {
        std::str::raw::from_c_str(swscale_license())
    }
}
