#![crate_id = "avcodec#54"]
#![license = "MIT"]
#![crate_type = "dylib"]
/* automatically generated by rust-bindgen */
extern crate libc;
extern crate avutil;
use libc::{c_void,c_int,c_uint,c_schar,size_t,uint8_t,int64_t,c_double,uint64_t,c_float,int16_t,int8_t,uint32_t,c_short,uint16_t,c_uchar};

pub type __int128_t = c_void;
pub type __uint128_t = c_void;
pub type __builtin_va_list = [__va_list_tag, ..1u];
pub type Enum_AVCodecID = c_uint;
pub static AV_CODEC_ID_NONE: c_uint = 0;
pub static AV_CODEC_ID_MPEG1VIDEO: c_uint = 1;
pub static AV_CODEC_ID_MPEG2VIDEO: c_uint = 2;
pub static AV_CODEC_ID_MPEG2VIDEO_XVMC: c_uint = 3;
pub static AV_CODEC_ID_H261: c_uint = 4;
pub static AV_CODEC_ID_H263: c_uint = 5;
pub static AV_CODEC_ID_RV10: c_uint = 6;
pub static AV_CODEC_ID_RV20: c_uint = 7;
pub static AV_CODEC_ID_MJPEG: c_uint = 8;
pub static AV_CODEC_ID_MJPEGB: c_uint = 9;
pub static AV_CODEC_ID_LJPEG: c_uint = 10;
pub static AV_CODEC_ID_SP5X: c_uint = 11;
pub static AV_CODEC_ID_JPEGLS: c_uint = 12;
pub static AV_CODEC_ID_MPEG4: c_uint = 13;
pub static AV_CODEC_ID_RAWVIDEO: c_uint = 14;
pub static AV_CODEC_ID_MSMPEG4V1: c_uint = 15;
pub static AV_CODEC_ID_MSMPEG4V2: c_uint = 16;
pub static AV_CODEC_ID_MSMPEG4V3: c_uint = 17;
pub static AV_CODEC_ID_WMV1: c_uint = 18;
pub static AV_CODEC_ID_WMV2: c_uint = 19;
pub static AV_CODEC_ID_H263P: c_uint = 20;
pub static AV_CODEC_ID_H263I: c_uint = 21;
pub static AV_CODEC_ID_FLV1: c_uint = 22;
pub static AV_CODEC_ID_SVQ1: c_uint = 23;
pub static AV_CODEC_ID_SVQ3: c_uint = 24;
pub static AV_CODEC_ID_DVVIDEO: c_uint = 25;
pub static AV_CODEC_ID_HUFFYUV: c_uint = 26;
pub static AV_CODEC_ID_CYUV: c_uint = 27;
pub static AV_CODEC_ID_H264: c_uint = 28;
pub static AV_CODEC_ID_INDEO3: c_uint = 29;
pub static AV_CODEC_ID_VP3: c_uint = 30;
pub static AV_CODEC_ID_THEORA: c_uint = 31;
pub static AV_CODEC_ID_ASV1: c_uint = 32;
pub static AV_CODEC_ID_ASV2: c_uint = 33;
pub static AV_CODEC_ID_FFV1: c_uint = 34;
pub static AV_CODEC_ID_4XM: c_uint = 35;
pub static AV_CODEC_ID_VCR1: c_uint = 36;
pub static AV_CODEC_ID_CLJR: c_uint = 37;
pub static AV_CODEC_ID_MDEC: c_uint = 38;
pub static AV_CODEC_ID_ROQ: c_uint = 39;
pub static AV_CODEC_ID_INTERPLAY_VIDEO: c_uint = 40;
pub static AV_CODEC_ID_XAN_WC3: c_uint = 41;
pub static AV_CODEC_ID_XAN_WC4: c_uint = 42;
pub static AV_CODEC_ID_RPZA: c_uint = 43;
pub static AV_CODEC_ID_CINEPAK: c_uint = 44;
pub static AV_CODEC_ID_WS_VQA: c_uint = 45;
pub static AV_CODEC_ID_MSRLE: c_uint = 46;
pub static AV_CODEC_ID_MSVIDEO1: c_uint = 47;
pub static AV_CODEC_ID_IDCIN: c_uint = 48;
pub static AV_CODEC_ID_8BPS: c_uint = 49;
pub static AV_CODEC_ID_SMC: c_uint = 50;
pub static AV_CODEC_ID_FLIC: c_uint = 51;
pub static AV_CODEC_ID_TRUEMOTION1: c_uint = 52;
pub static AV_CODEC_ID_VMDVIDEO: c_uint = 53;
pub static AV_CODEC_ID_MSZH: c_uint = 54;
pub static AV_CODEC_ID_ZLIB: c_uint = 55;
pub static AV_CODEC_ID_QTRLE: c_uint = 56;
pub static AV_CODEC_ID_SNOW: c_uint = 57;
pub static AV_CODEC_ID_TSCC: c_uint = 58;
pub static AV_CODEC_ID_ULTI: c_uint = 59;
pub static AV_CODEC_ID_QDRAW: c_uint = 60;
pub static AV_CODEC_ID_VIXL: c_uint = 61;
pub static AV_CODEC_ID_QPEG: c_uint = 62;
pub static AV_CODEC_ID_PNG: c_uint = 63;
pub static AV_CODEC_ID_PPM: c_uint = 64;
pub static AV_CODEC_ID_PBM: c_uint = 65;
pub static AV_CODEC_ID_PGM: c_uint = 66;
pub static AV_CODEC_ID_PGMYUV: c_uint = 67;
pub static AV_CODEC_ID_PAM: c_uint = 68;
pub static AV_CODEC_ID_FFVHUFF: c_uint = 69;
pub static AV_CODEC_ID_RV30: c_uint = 70;
pub static AV_CODEC_ID_RV40: c_uint = 71;
pub static AV_CODEC_ID_VC1: c_uint = 72;
pub static AV_CODEC_ID_WMV3: c_uint = 73;
pub static AV_CODEC_ID_LOCO: c_uint = 74;
pub static AV_CODEC_ID_WNV1: c_uint = 75;
pub static AV_CODEC_ID_AASC: c_uint = 76;
pub static AV_CODEC_ID_INDEO2: c_uint = 77;
pub static AV_CODEC_ID_FRAPS: c_uint = 78;
pub static AV_CODEC_ID_TRUEMOTION2: c_uint = 79;
pub static AV_CODEC_ID_BMP: c_uint = 80;
pub static AV_CODEC_ID_CSCD: c_uint = 81;
pub static AV_CODEC_ID_MMVIDEO: c_uint = 82;
pub static AV_CODEC_ID_ZMBV: c_uint = 83;
pub static AV_CODEC_ID_AVS: c_uint = 84;
pub static AV_CODEC_ID_SMACKVIDEO: c_uint = 85;
pub static AV_CODEC_ID_NUV: c_uint = 86;
pub static AV_CODEC_ID_KMVC: c_uint = 87;
pub static AV_CODEC_ID_FLASHSV: c_uint = 88;
pub static AV_CODEC_ID_CAVS: c_uint = 89;
pub static AV_CODEC_ID_JPEG2000: c_uint = 90;
pub static AV_CODEC_ID_VMNC: c_uint = 91;
pub static AV_CODEC_ID_VP5: c_uint = 92;
pub static AV_CODEC_ID_VP6: c_uint = 93;
pub static AV_CODEC_ID_VP6F: c_uint = 94;
pub static AV_CODEC_ID_TARGA: c_uint = 95;
pub static AV_CODEC_ID_DSICINVIDEO: c_uint = 96;
pub static AV_CODEC_ID_TIERTEXSEQVIDEO: c_uint = 97;
pub static AV_CODEC_ID_TIFF: c_uint = 98;
pub static AV_CODEC_ID_GIF: c_uint = 99;
pub static AV_CODEC_ID_DXA: c_uint = 100;
pub static AV_CODEC_ID_DNXHD: c_uint = 101;
pub static AV_CODEC_ID_THP: c_uint = 102;
pub static AV_CODEC_ID_SGI: c_uint = 103;
pub static AV_CODEC_ID_C93: c_uint = 104;
pub static AV_CODEC_ID_BETHSOFTVID: c_uint = 105;
pub static AV_CODEC_ID_PTX: c_uint = 106;
pub static AV_CODEC_ID_TXD: c_uint = 107;
pub static AV_CODEC_ID_VP6A: c_uint = 108;
pub static AV_CODEC_ID_AMV: c_uint = 109;
pub static AV_CODEC_ID_VB: c_uint = 110;
pub static AV_CODEC_ID_PCX: c_uint = 111;
pub static AV_CODEC_ID_SUNRAST: c_uint = 112;
pub static AV_CODEC_ID_INDEO4: c_uint = 113;
pub static AV_CODEC_ID_INDEO5: c_uint = 114;
pub static AV_CODEC_ID_MIMIC: c_uint = 115;
pub static AV_CODEC_ID_RL2: c_uint = 116;
pub static AV_CODEC_ID_ESCAPE124: c_uint = 117;
pub static AV_CODEC_ID_DIRAC: c_uint = 118;
pub static AV_CODEC_ID_BFI: c_uint = 119;
pub static AV_CODEC_ID_CMV: c_uint = 120;
pub static AV_CODEC_ID_MOTIONPIXELS: c_uint = 121;
pub static AV_CODEC_ID_TGV: c_uint = 122;
pub static AV_CODEC_ID_TGQ: c_uint = 123;
pub static AV_CODEC_ID_TQI: c_uint = 124;
pub static AV_CODEC_ID_AURA: c_uint = 125;
pub static AV_CODEC_ID_AURA2: c_uint = 126;
pub static AV_CODEC_ID_V210X: c_uint = 127;
pub static AV_CODEC_ID_TMV: c_uint = 128;
pub static AV_CODEC_ID_V210: c_uint = 129;
pub static AV_CODEC_ID_DPX: c_uint = 130;
pub static AV_CODEC_ID_MAD: c_uint = 131;
pub static AV_CODEC_ID_FRWU: c_uint = 132;
pub static AV_CODEC_ID_FLASHSV2: c_uint = 133;
pub static AV_CODEC_ID_CDGRAPHICS: c_uint = 134;
pub static AV_CODEC_ID_R210: c_uint = 135;
pub static AV_CODEC_ID_ANM: c_uint = 136;
pub static AV_CODEC_ID_BINKVIDEO: c_uint = 137;
pub static AV_CODEC_ID_IFF_ILBM: c_uint = 138;
pub static AV_CODEC_ID_IFF_BYTERUN1: c_uint = 139;
pub static AV_CODEC_ID_KGV1: c_uint = 140;
pub static AV_CODEC_ID_YOP: c_uint = 141;
pub static AV_CODEC_ID_VP8: c_uint = 142;
pub static AV_CODEC_ID_PICTOR: c_uint = 143;
pub static AV_CODEC_ID_ANSI: c_uint = 144;
pub static AV_CODEC_ID_A64_MULTI: c_uint = 145;
pub static AV_CODEC_ID_A64_MULTI5: c_uint = 146;
pub static AV_CODEC_ID_R10K: c_uint = 147;
pub static AV_CODEC_ID_MXPEG: c_uint = 148;
pub static AV_CODEC_ID_LAGARITH: c_uint = 149;
pub static AV_CODEC_ID_PRORES: c_uint = 150;
pub static AV_CODEC_ID_JV: c_uint = 151;
pub static AV_CODEC_ID_DFA: c_uint = 152;
pub static AV_CODEC_ID_WMV3IMAGE: c_uint = 153;
pub static AV_CODEC_ID_VC1IMAGE: c_uint = 154;
pub static AV_CODEC_ID_UTVIDEO: c_uint = 155;
pub static AV_CODEC_ID_BMV_VIDEO: c_uint = 156;
pub static AV_CODEC_ID_VBLE: c_uint = 157;
pub static AV_CODEC_ID_DXTORY: c_uint = 158;
pub static AV_CODEC_ID_V410: c_uint = 159;
pub static AV_CODEC_ID_XWD: c_uint = 160;
pub static AV_CODEC_ID_CDXL: c_uint = 161;
pub static AV_CODEC_ID_XBM: c_uint = 162;
pub static AV_CODEC_ID_ZEROCODEC: c_uint = 163;
pub static AV_CODEC_ID_MSS1: c_uint = 164;
pub static AV_CODEC_ID_MSA1: c_uint = 165;
pub static AV_CODEC_ID_TSCC2: c_uint = 166;
pub static AV_CODEC_ID_MTS2: c_uint = 167;
pub static AV_CODEC_ID_CLLC: c_uint = 168;
pub static AV_CODEC_ID_MSS2: c_uint = 169;
pub static AV_CODEC_ID_VP9: c_uint = 170;
pub static AV_CODEC_ID_BRENDER_PIX: c_uint = 1112557912;
pub static AV_CODEC_ID_Y41P: c_uint = 1496592720;
pub static AV_CODEC_ID_ESCAPE130: c_uint = 1160852272;
pub static AV_CODEC_ID_EXR: c_uint = 809850962;
pub static AV_CODEC_ID_AVRP: c_uint = 1096176208;
pub static AV_CODEC_ID_012V: c_uint = 808530518;
pub static AV_CODEC_ID_G2M: c_uint = 4665933;
pub static AV_CODEC_ID_AVUI: c_uint = 1096176969;
pub static AV_CODEC_ID_AYUV: c_uint = 1096373590;
pub static AV_CODEC_ID_TARGA_Y216: c_uint = 1412575542;
pub static AV_CODEC_ID_V308: c_uint = 1446195256;
pub static AV_CODEC_ID_V408: c_uint = 1446260792;
pub static AV_CODEC_ID_YUV4: c_uint = 1498764852;
pub static AV_CODEC_ID_SANM: c_uint = 1396788813;
pub static AV_CODEC_ID_PAF_VIDEO: c_uint = 1346455126;
pub static AV_CODEC_ID_AVRN: c_uint = 1096176238;
pub static AV_CODEC_ID_CPIA: c_uint = 1129335105;
pub static AV_CODEC_ID_XFACE: c_uint = 1480999235;
pub static AV_CODEC_ID_SGIRLE: c_uint = 1397180754;
pub static AV_CODEC_ID_MVC1: c_uint = 1297498929;
pub static AV_CODEC_ID_MVC2: c_uint = 1297498930;
pub static AV_CODEC_ID_FIRST_AUDIO: c_uint = 65536;
pub static AV_CODEC_ID_PCM_S16LE: c_uint = 65536;
pub static AV_CODEC_ID_PCM_S16BE: c_uint = 65537;
pub static AV_CODEC_ID_PCM_U16LE: c_uint = 65538;
pub static AV_CODEC_ID_PCM_U16BE: c_uint = 65539;
pub static AV_CODEC_ID_PCM_S8: c_uint = 65540;
pub static AV_CODEC_ID_PCM_U8: c_uint = 65541;
pub static AV_CODEC_ID_PCM_MULAW: c_uint = 65542;
pub static AV_CODEC_ID_PCM_ALAW: c_uint = 65543;
pub static AV_CODEC_ID_PCM_S32LE: c_uint = 65544;
pub static AV_CODEC_ID_PCM_S32BE: c_uint = 65545;
pub static AV_CODEC_ID_PCM_U32LE: c_uint = 65546;
pub static AV_CODEC_ID_PCM_U32BE: c_uint = 65547;
pub static AV_CODEC_ID_PCM_S24LE: c_uint = 65548;
pub static AV_CODEC_ID_PCM_S24BE: c_uint = 65549;
pub static AV_CODEC_ID_PCM_U24LE: c_uint = 65550;
pub static AV_CODEC_ID_PCM_U24BE: c_uint = 65551;
pub static AV_CODEC_ID_PCM_S24DAUD: c_uint = 65552;
pub static AV_CODEC_ID_PCM_ZORK: c_uint = 65553;
pub static AV_CODEC_ID_PCM_S16LE_PLANAR: c_uint = 65554;
pub static AV_CODEC_ID_PCM_DVD: c_uint = 65555;
pub static AV_CODEC_ID_PCM_F32BE: c_uint = 65556;
pub static AV_CODEC_ID_PCM_F32LE: c_uint = 65557;
pub static AV_CODEC_ID_PCM_F64BE: c_uint = 65558;
pub static AV_CODEC_ID_PCM_F64LE: c_uint = 65559;
pub static AV_CODEC_ID_PCM_BLURAY: c_uint = 65560;
pub static AV_CODEC_ID_PCM_LXF: c_uint = 65561;
pub static AV_CODEC_ID_S302M: c_uint = 65562;
pub static AV_CODEC_ID_PCM_S8_PLANAR: c_uint = 65563;
pub static AV_CODEC_ID_PCM_S24LE_PLANAR: c_uint = 407917392;
pub static AV_CODEC_ID_PCM_S32LE_PLANAR: c_uint = 542135120;
pub static AV_CODEC_ID_PCM_S16BE_PLANAR: c_uint = 1347637264;
pub static AV_CODEC_ID_ADPCM_IMA_QT: c_uint = 69632;
pub static AV_CODEC_ID_ADPCM_IMA_WAV: c_uint = 69633;
pub static AV_CODEC_ID_ADPCM_IMA_DK3: c_uint = 69634;
pub static AV_CODEC_ID_ADPCM_IMA_DK4: c_uint = 69635;
pub static AV_CODEC_ID_ADPCM_IMA_WS: c_uint = 69636;
pub static AV_CODEC_ID_ADPCM_IMA_SMJPEG: c_uint = 69637;
pub static AV_CODEC_ID_ADPCM_MS: c_uint = 69638;
pub static AV_CODEC_ID_ADPCM_4XM: c_uint = 69639;
pub static AV_CODEC_ID_ADPCM_XA: c_uint = 69640;
pub static AV_CODEC_ID_ADPCM_ADX: c_uint = 69641;
pub static AV_CODEC_ID_ADPCM_EA: c_uint = 69642;
pub static AV_CODEC_ID_ADPCM_G726: c_uint = 69643;
pub static AV_CODEC_ID_ADPCM_CT: c_uint = 69644;
pub static AV_CODEC_ID_ADPCM_SWF: c_uint = 69645;
pub static AV_CODEC_ID_ADPCM_YAMAHA: c_uint = 69646;
pub static AV_CODEC_ID_ADPCM_SBPRO_4: c_uint = 69647;
pub static AV_CODEC_ID_ADPCM_SBPRO_3: c_uint = 69648;
pub static AV_CODEC_ID_ADPCM_SBPRO_2: c_uint = 69649;
pub static AV_CODEC_ID_ADPCM_THP: c_uint = 69650;
pub static AV_CODEC_ID_ADPCM_IMA_AMV: c_uint = 69651;
pub static AV_CODEC_ID_ADPCM_EA_R1: c_uint = 69652;
pub static AV_CODEC_ID_ADPCM_EA_R3: c_uint = 69653;
pub static AV_CODEC_ID_ADPCM_EA_R2: c_uint = 69654;
pub static AV_CODEC_ID_ADPCM_IMA_EA_SEAD: c_uint = 69655;
pub static AV_CODEC_ID_ADPCM_IMA_EA_EACS: c_uint = 69656;
pub static AV_CODEC_ID_ADPCM_EA_XAS: c_uint = 69657;
pub static AV_CODEC_ID_ADPCM_EA_MAXIS_XA: c_uint = 69658;
pub static AV_CODEC_ID_ADPCM_IMA_ISS: c_uint = 69659;
pub static AV_CODEC_ID_ADPCM_G722: c_uint = 69660;
pub static AV_CODEC_ID_ADPCM_IMA_APC: c_uint = 69661;
pub static AV_CODEC_ID_VIMA: c_uint = 1447644481;
pub static AV_CODEC_ID_ADPCM_AFC: c_uint = 1095123744;
pub static AV_CODEC_ID_ADPCM_IMA_OKI: c_uint = 1330333984;
pub static AV_CODEC_ID_AMR_NB: c_uint = 73728;
pub static AV_CODEC_ID_AMR_WB: c_uint = 73729;
pub static AV_CODEC_ID_RA_144: c_uint = 77824;
pub static AV_CODEC_ID_RA_288: c_uint = 77825;
pub static AV_CODEC_ID_ROQ_DPCM: c_uint = 81920;
pub static AV_CODEC_ID_INTERPLAY_DPCM: c_uint = 81921;
pub static AV_CODEC_ID_XAN_DPCM: c_uint = 81922;
pub static AV_CODEC_ID_SOL_DPCM: c_uint = 81923;
pub static AV_CODEC_ID_MP2: c_uint = 86016;
pub static AV_CODEC_ID_MP3: c_uint = 86017;
pub static AV_CODEC_ID_AAC: c_uint = 86018;
pub static AV_CODEC_ID_AC3: c_uint = 86019;
pub static AV_CODEC_ID_DTS: c_uint = 86020;
pub static AV_CODEC_ID_VORBIS: c_uint = 86021;
pub static AV_CODEC_ID_DVAUDIO: c_uint = 86022;
pub static AV_CODEC_ID_WMAV1: c_uint = 86023;
pub static AV_CODEC_ID_WMAV2: c_uint = 86024;
pub static AV_CODEC_ID_MACE3: c_uint = 86025;
pub static AV_CODEC_ID_MACE6: c_uint = 86026;
pub static AV_CODEC_ID_VMDAUDIO: c_uint = 86027;
pub static AV_CODEC_ID_FLAC: c_uint = 86028;
pub static AV_CODEC_ID_MP3ADU: c_uint = 86029;
pub static AV_CODEC_ID_MP3ON4: c_uint = 86030;
pub static AV_CODEC_ID_SHORTEN: c_uint = 86031;
pub static AV_CODEC_ID_ALAC: c_uint = 86032;
pub static AV_CODEC_ID_WESTWOOD_SND1: c_uint = 86033;
pub static AV_CODEC_ID_GSM: c_uint = 86034;
pub static AV_CODEC_ID_QDM2: c_uint = 86035;
pub static AV_CODEC_ID_COOK: c_uint = 86036;
pub static AV_CODEC_ID_TRUESPEECH: c_uint = 86037;
pub static AV_CODEC_ID_TTA: c_uint = 86038;
pub static AV_CODEC_ID_SMACKAUDIO: c_uint = 86039;
pub static AV_CODEC_ID_QCELP: c_uint = 86040;
pub static AV_CODEC_ID_WAVPACK: c_uint = 86041;
pub static AV_CODEC_ID_DSICINAUDIO: c_uint = 86042;
pub static AV_CODEC_ID_IMC: c_uint = 86043;
pub static AV_CODEC_ID_MUSEPACK7: c_uint = 86044;
pub static AV_CODEC_ID_MLP: c_uint = 86045;
pub static AV_CODEC_ID_GSM_MS: c_uint = 86046;
pub static AV_CODEC_ID_ATRAC3: c_uint = 86047;
pub static AV_CODEC_ID_VOXWARE: c_uint = 86048;
pub static AV_CODEC_ID_APE: c_uint = 86049;
pub static AV_CODEC_ID_NELLYMOSER: c_uint = 86050;
pub static AV_CODEC_ID_MUSEPACK8: c_uint = 86051;
pub static AV_CODEC_ID_SPEEX: c_uint = 86052;
pub static AV_CODEC_ID_WMAVOICE: c_uint = 86053;
pub static AV_CODEC_ID_WMAPRO: c_uint = 86054;
pub static AV_CODEC_ID_WMALOSSLESS: c_uint = 86055;
pub static AV_CODEC_ID_ATRAC3P: c_uint = 86056;
pub static AV_CODEC_ID_EAC3: c_uint = 86057;
pub static AV_CODEC_ID_SIPR: c_uint = 86058;
pub static AV_CODEC_ID_MP1: c_uint = 86059;
pub static AV_CODEC_ID_TWINVQ: c_uint = 86060;
pub static AV_CODEC_ID_TRUEHD: c_uint = 86061;
pub static AV_CODEC_ID_MP4ALS: c_uint = 86062;
pub static AV_CODEC_ID_ATRAC1: c_uint = 86063;
pub static AV_CODEC_ID_BINKAUDIO_RDFT: c_uint = 86064;
pub static AV_CODEC_ID_BINKAUDIO_DCT: c_uint = 86065;
pub static AV_CODEC_ID_AAC_LATM: c_uint = 86066;
pub static AV_CODEC_ID_QDMC: c_uint = 86067;
pub static AV_CODEC_ID_CELT: c_uint = 86068;
pub static AV_CODEC_ID_G723_1: c_uint = 86069;
pub static AV_CODEC_ID_G729: c_uint = 86070;
pub static AV_CODEC_ID_8SVX_EXP: c_uint = 86071;
pub static AV_CODEC_ID_8SVX_FIB: c_uint = 86072;
pub static AV_CODEC_ID_BMV_AUDIO: c_uint = 86073;
pub static AV_CODEC_ID_RALF: c_uint = 86074;
pub static AV_CODEC_ID_IAC: c_uint = 86075;
pub static AV_CODEC_ID_ILBC: c_uint = 86076;
pub static AV_CODEC_ID_OPUS_DEPRECATED: c_uint = 86077;
pub static AV_CODEC_ID_COMFORT_NOISE: c_uint = 86078;
pub static AV_CODEC_ID_TAK_DEPRECATED: c_uint = 86079;
pub static AV_CODEC_ID_FFWAVESYNTH: c_uint = 1179014995;
pub static AV_CODEC_ID_8SVX_RAW: c_uint = 944985688;
pub static AV_CODEC_ID_SONIC: c_uint = 1397706307;
pub static AV_CODEC_ID_SONIC_LS: c_uint = 1397706316;
pub static AV_CODEC_ID_PAF_AUDIO: c_uint = 1346455105;
pub static AV_CODEC_ID_OPUS: c_uint = 1330664787;
pub static AV_CODEC_ID_TAK: c_uint = 1950507339;
pub static AV_CODEC_ID_EVRC: c_uint = 1936029283;
pub static AV_CODEC_ID_SMV: c_uint = 1936944502;
pub static AV_CODEC_ID_FIRST_SUBTITLE: c_uint = 94208;
pub static AV_CODEC_ID_DVD_SUBTITLE: c_uint = 94208;
pub static AV_CODEC_ID_DVB_SUBTITLE: c_uint = 94209;
pub static AV_CODEC_ID_TEXT: c_uint = 94210;
pub static AV_CODEC_ID_XSUB: c_uint = 94211;
pub static AV_CODEC_ID_SSA: c_uint = 94212;
pub static AV_CODEC_ID_MOV_TEXT: c_uint = 94213;
pub static AV_CODEC_ID_HDMV_PGS_SUBTITLE: c_uint = 94214;
pub static AV_CODEC_ID_DVB_TELETEXT: c_uint = 94215;
pub static AV_CODEC_ID_SRT: c_uint = 94216;
pub static AV_CODEC_ID_MICRODVD: c_uint = 1833195076;
pub static AV_CODEC_ID_EIA_608: c_uint = 1664495672;
pub static AV_CODEC_ID_JACOSUB: c_uint = 1246975298;
pub static AV_CODEC_ID_SAMI: c_uint = 1396788553;
pub static AV_CODEC_ID_REALTEXT: c_uint = 1381259348;
pub static AV_CODEC_ID_SUBVIEWER1: c_uint = 1398953521;
pub static AV_CODEC_ID_SUBVIEWER: c_uint = 1400201814;
pub static AV_CODEC_ID_SUBRIP: c_uint = 1397909872;
pub static AV_CODEC_ID_WEBVTT: c_uint = 1465275476;
pub static AV_CODEC_ID_MPL2: c_uint = 1297108018;
pub static AV_CODEC_ID_VPLAYER: c_uint = 1448111218;
pub static AV_CODEC_ID_PJS: c_uint = 1349012051;
pub static AV_CODEC_ID_FIRST_UNKNOWN: c_uint = 98304;
pub static AV_CODEC_ID_TTF: c_uint = 98304;
pub static AV_CODEC_ID_BINTEXT: c_uint = 1112823892;
pub static AV_CODEC_ID_XBIN: c_uint = 1480739150;
pub static AV_CODEC_ID_IDF: c_uint = 4801606;
pub static AV_CODEC_ID_OTF: c_uint = 5198918;
pub static AV_CODEC_ID_SMPTE_KLV: c_uint = 1263294017;
pub static AV_CODEC_ID_PROBE: c_uint = 102400;
pub static AV_CODEC_ID_MPEG2TS: c_uint = 131072;
pub static AV_CODEC_ID_MPEG4SYSTEMS: c_uint = 131073;
pub static AV_CODEC_ID_FFMETADATA: c_uint = 135168;
pub static CODEC_ID_NONE: c_uint = 0;
pub static CODEC_ID_MPEG1VIDEO: c_uint = 1;
pub static CODEC_ID_MPEG2VIDEO: c_uint = 2;
pub static CODEC_ID_MPEG2VIDEO_XVMC: c_uint = 3;
pub static CODEC_ID_H261: c_uint = 4;
pub static CODEC_ID_H263: c_uint = 5;
pub static CODEC_ID_RV10: c_uint = 6;
pub static CODEC_ID_RV20: c_uint = 7;
pub static CODEC_ID_MJPEG: c_uint = 8;
pub static CODEC_ID_MJPEGB: c_uint = 9;
pub static CODEC_ID_LJPEG: c_uint = 10;
pub static CODEC_ID_SP5X: c_uint = 11;
pub static CODEC_ID_JPEGLS: c_uint = 12;
pub static CODEC_ID_MPEG4: c_uint = 13;
pub static CODEC_ID_RAWVIDEO: c_uint = 14;
pub static CODEC_ID_MSMPEG4V1: c_uint = 15;
pub static CODEC_ID_MSMPEG4V2: c_uint = 16;
pub static CODEC_ID_MSMPEG4V3: c_uint = 17;
pub static CODEC_ID_WMV1: c_uint = 18;
pub static CODEC_ID_WMV2: c_uint = 19;
pub static CODEC_ID_H263P: c_uint = 20;
pub static CODEC_ID_H263I: c_uint = 21;
pub static CODEC_ID_FLV1: c_uint = 22;
pub static CODEC_ID_SVQ1: c_uint = 23;
pub static CODEC_ID_SVQ3: c_uint = 24;
pub static CODEC_ID_DVVIDEO: c_uint = 25;
pub static CODEC_ID_HUFFYUV: c_uint = 26;
pub static CODEC_ID_CYUV: c_uint = 27;
pub static CODEC_ID_H264: c_uint = 28;
pub static CODEC_ID_INDEO3: c_uint = 29;
pub static CODEC_ID_VP3: c_uint = 30;
pub static CODEC_ID_THEORA: c_uint = 31;
pub static CODEC_ID_ASV1: c_uint = 32;
pub static CODEC_ID_ASV2: c_uint = 33;
pub static CODEC_ID_FFV1: c_uint = 34;
pub static CODEC_ID_4XM: c_uint = 35;
pub static CODEC_ID_VCR1: c_uint = 36;
pub static CODEC_ID_CLJR: c_uint = 37;
pub static CODEC_ID_MDEC: c_uint = 38;
pub static CODEC_ID_ROQ: c_uint = 39;
pub static CODEC_ID_INTERPLAY_VIDEO: c_uint = 40;
pub static CODEC_ID_XAN_WC3: c_uint = 41;
pub static CODEC_ID_XAN_WC4: c_uint = 42;
pub static CODEC_ID_RPZA: c_uint = 43;
pub static CODEC_ID_CINEPAK: c_uint = 44;
pub static CODEC_ID_WS_VQA: c_uint = 45;
pub static CODEC_ID_MSRLE: c_uint = 46;
pub static CODEC_ID_MSVIDEO1: c_uint = 47;
pub static CODEC_ID_IDCIN: c_uint = 48;
pub static CODEC_ID_8BPS: c_uint = 49;
pub static CODEC_ID_SMC: c_uint = 50;
pub static CODEC_ID_FLIC: c_uint = 51;
pub static CODEC_ID_TRUEMOTION1: c_uint = 52;
pub static CODEC_ID_VMDVIDEO: c_uint = 53;
pub static CODEC_ID_MSZH: c_uint = 54;
pub static CODEC_ID_ZLIB: c_uint = 55;
pub static CODEC_ID_QTRLE: c_uint = 56;
pub static CODEC_ID_SNOW: c_uint = 57;
pub static CODEC_ID_TSCC: c_uint = 58;
pub static CODEC_ID_ULTI: c_uint = 59;
pub static CODEC_ID_QDRAW: c_uint = 60;
pub static CODEC_ID_VIXL: c_uint = 61;
pub static CODEC_ID_QPEG: c_uint = 62;
pub static CODEC_ID_PNG: c_uint = 63;
pub static CODEC_ID_PPM: c_uint = 64;
pub static CODEC_ID_PBM: c_uint = 65;
pub static CODEC_ID_PGM: c_uint = 66;
pub static CODEC_ID_PGMYUV: c_uint = 67;
pub static CODEC_ID_PAM: c_uint = 68;
pub static CODEC_ID_FFVHUFF: c_uint = 69;
pub static CODEC_ID_RV30: c_uint = 70;
pub static CODEC_ID_RV40: c_uint = 71;
pub static CODEC_ID_VC1: c_uint = 72;
pub static CODEC_ID_WMV3: c_uint = 73;
pub static CODEC_ID_LOCO: c_uint = 74;
pub static CODEC_ID_WNV1: c_uint = 75;
pub static CODEC_ID_AASC: c_uint = 76;
pub static CODEC_ID_INDEO2: c_uint = 77;
pub static CODEC_ID_FRAPS: c_uint = 78;
pub static CODEC_ID_TRUEMOTION2: c_uint = 79;
pub static CODEC_ID_BMP: c_uint = 80;
pub static CODEC_ID_CSCD: c_uint = 81;
pub static CODEC_ID_MMVIDEO: c_uint = 82;
pub static CODEC_ID_ZMBV: c_uint = 83;
pub static CODEC_ID_AVS: c_uint = 84;
pub static CODEC_ID_SMACKVIDEO: c_uint = 85;
pub static CODEC_ID_NUV: c_uint = 86;
pub static CODEC_ID_KMVC: c_uint = 87;
pub static CODEC_ID_FLASHSV: c_uint = 88;
pub static CODEC_ID_CAVS: c_uint = 89;
pub static CODEC_ID_JPEG2000: c_uint = 90;
pub static CODEC_ID_VMNC: c_uint = 91;
pub static CODEC_ID_VP5: c_uint = 92;
pub static CODEC_ID_VP6: c_uint = 93;
pub static CODEC_ID_VP6F: c_uint = 94;
pub static CODEC_ID_TARGA: c_uint = 95;
pub static CODEC_ID_DSICINVIDEO: c_uint = 96;
pub static CODEC_ID_TIERTEXSEQVIDEO: c_uint = 97;
pub static CODEC_ID_TIFF: c_uint = 98;
pub static CODEC_ID_GIF: c_uint = 99;
pub static CODEC_ID_DXA: c_uint = 100;
pub static CODEC_ID_DNXHD: c_uint = 101;
pub static CODEC_ID_THP: c_uint = 102;
pub static CODEC_ID_SGI: c_uint = 103;
pub static CODEC_ID_C93: c_uint = 104;
pub static CODEC_ID_BETHSOFTVID: c_uint = 105;
pub static CODEC_ID_PTX: c_uint = 106;
pub static CODEC_ID_TXD: c_uint = 107;
pub static CODEC_ID_VP6A: c_uint = 108;
pub static CODEC_ID_AMV: c_uint = 109;
pub static CODEC_ID_VB: c_uint = 110;
pub static CODEC_ID_PCX: c_uint = 111;
pub static CODEC_ID_SUNRAST: c_uint = 112;
pub static CODEC_ID_INDEO4: c_uint = 113;
pub static CODEC_ID_INDEO5: c_uint = 114;
pub static CODEC_ID_MIMIC: c_uint = 115;
pub static CODEC_ID_RL2: c_uint = 116;
pub static CODEC_ID_ESCAPE124: c_uint = 117;
pub static CODEC_ID_DIRAC: c_uint = 118;
pub static CODEC_ID_BFI: c_uint = 119;
pub static CODEC_ID_CMV: c_uint = 120;
pub static CODEC_ID_MOTIONPIXELS: c_uint = 121;
pub static CODEC_ID_TGV: c_uint = 122;
pub static CODEC_ID_TGQ: c_uint = 123;
pub static CODEC_ID_TQI: c_uint = 124;
pub static CODEC_ID_AURA: c_uint = 125;
pub static CODEC_ID_AURA2: c_uint = 126;
pub static CODEC_ID_V210X: c_uint = 127;
pub static CODEC_ID_TMV: c_uint = 128;
pub static CODEC_ID_V210: c_uint = 129;
pub static CODEC_ID_DPX: c_uint = 130;
pub static CODEC_ID_MAD: c_uint = 131;
pub static CODEC_ID_FRWU: c_uint = 132;
pub static CODEC_ID_FLASHSV2: c_uint = 133;
pub static CODEC_ID_CDGRAPHICS: c_uint = 134;
pub static CODEC_ID_R210: c_uint = 135;
pub static CODEC_ID_ANM: c_uint = 136;
pub static CODEC_ID_BINKVIDEO: c_uint = 137;
pub static CODEC_ID_IFF_ILBM: c_uint = 138;
pub static CODEC_ID_IFF_BYTERUN1: c_uint = 139;
pub static CODEC_ID_KGV1: c_uint = 140;
pub static CODEC_ID_YOP: c_uint = 141;
pub static CODEC_ID_VP8: c_uint = 142;
pub static CODEC_ID_PICTOR: c_uint = 143;
pub static CODEC_ID_ANSI: c_uint = 144;
pub static CODEC_ID_A64_MULTI: c_uint = 145;
pub static CODEC_ID_A64_MULTI5: c_uint = 146;
pub static CODEC_ID_R10K: c_uint = 147;
pub static CODEC_ID_MXPEG: c_uint = 148;
pub static CODEC_ID_LAGARITH: c_uint = 149;
pub static CODEC_ID_PRORES: c_uint = 150;
pub static CODEC_ID_JV: c_uint = 151;
pub static CODEC_ID_DFA: c_uint = 152;
pub static CODEC_ID_WMV3IMAGE: c_uint = 153;
pub static CODEC_ID_VC1IMAGE: c_uint = 154;
pub static CODEC_ID_UTVIDEO: c_uint = 155;
pub static CODEC_ID_BMV_VIDEO: c_uint = 156;
pub static CODEC_ID_VBLE: c_uint = 157;
pub static CODEC_ID_DXTORY: c_uint = 158;
pub static CODEC_ID_V410: c_uint = 159;
pub static CODEC_ID_XWD: c_uint = 160;
pub static CODEC_ID_CDXL: c_uint = 161;
pub static CODEC_ID_XBM: c_uint = 162;
pub static CODEC_ID_ZEROCODEC: c_uint = 163;
pub static CODEC_ID_MSS1: c_uint = 164;
pub static CODEC_ID_MSA1: c_uint = 165;
pub static CODEC_ID_TSCC2: c_uint = 166;
pub static CODEC_ID_MTS2: c_uint = 167;
pub static CODEC_ID_CLLC: c_uint = 168;
pub static CODEC_ID_Y41P: c_uint = 1496592720;
pub static CODEC_ID_ESCAPE130: c_uint = 1160852272;
pub static CODEC_ID_EXR: c_uint = 809850962;
pub static CODEC_ID_AVRP: c_uint = 1096176208;
pub static CODEC_ID_G2M: c_uint = 4665933;
pub static CODEC_ID_AVUI: c_uint = 1096176969;
pub static CODEC_ID_AYUV: c_uint = 1096373590;
pub static CODEC_ID_V308: c_uint = 1446195256;
pub static CODEC_ID_V408: c_uint = 1446260792;
pub static CODEC_ID_YUV4: c_uint = 1498764852;
pub static CODEC_ID_SANM: c_uint = 1396788813;
pub static CODEC_ID_PAF_VIDEO: c_uint = 1346455126;
pub static CODEC_ID_FIRST_AUDIO: c_uint = 65536;
pub static CODEC_ID_PCM_S16LE: c_uint = 65536;
pub static CODEC_ID_PCM_S16BE: c_uint = 65537;
pub static CODEC_ID_PCM_U16LE: c_uint = 65538;
pub static CODEC_ID_PCM_U16BE: c_uint = 65539;
pub static CODEC_ID_PCM_S8: c_uint = 65540;
pub static CODEC_ID_PCM_U8: c_uint = 65541;
pub static CODEC_ID_PCM_MULAW: c_uint = 65542;
pub static CODEC_ID_PCM_ALAW: c_uint = 65543;
pub static CODEC_ID_PCM_S32LE: c_uint = 65544;
pub static CODEC_ID_PCM_S32BE: c_uint = 65545;
pub static CODEC_ID_PCM_U32LE: c_uint = 65546;
pub static CODEC_ID_PCM_U32BE: c_uint = 65547;
pub static CODEC_ID_PCM_S24LE: c_uint = 65548;
pub static CODEC_ID_PCM_S24BE: c_uint = 65549;
pub static CODEC_ID_PCM_U24LE: c_uint = 65550;
pub static CODEC_ID_PCM_U24BE: c_uint = 65551;
pub static CODEC_ID_PCM_S24DAUD: c_uint = 65552;
pub static CODEC_ID_PCM_ZORK: c_uint = 65553;
pub static CODEC_ID_PCM_S16LE_PLANAR: c_uint = 65554;
pub static CODEC_ID_PCM_DVD: c_uint = 65555;
pub static CODEC_ID_PCM_F32BE: c_uint = 65556;
pub static CODEC_ID_PCM_F32LE: c_uint = 65557;
pub static CODEC_ID_PCM_F64BE: c_uint = 65558;
pub static CODEC_ID_PCM_F64LE: c_uint = 65559;
pub static CODEC_ID_PCM_BLURAY: c_uint = 65560;
pub static CODEC_ID_PCM_LXF: c_uint = 65561;
pub static CODEC_ID_S302M: c_uint = 65562;
pub static CODEC_ID_PCM_S8_PLANAR: c_uint = 65563;
pub static CODEC_ID_ADPCM_IMA_QT: c_uint = 69632;
pub static CODEC_ID_ADPCM_IMA_WAV: c_uint = 69633;
pub static CODEC_ID_ADPCM_IMA_DK3: c_uint = 69634;
pub static CODEC_ID_ADPCM_IMA_DK4: c_uint = 69635;
pub static CODEC_ID_ADPCM_IMA_WS: c_uint = 69636;
pub static CODEC_ID_ADPCM_IMA_SMJPEG: c_uint = 69637;
pub static CODEC_ID_ADPCM_MS: c_uint = 69638;
pub static CODEC_ID_ADPCM_4XM: c_uint = 69639;
pub static CODEC_ID_ADPCM_XA: c_uint = 69640;
pub static CODEC_ID_ADPCM_ADX: c_uint = 69641;
pub static CODEC_ID_ADPCM_EA: c_uint = 69642;
pub static CODEC_ID_ADPCM_G726: c_uint = 69643;
pub static CODEC_ID_ADPCM_CT: c_uint = 69644;
pub static CODEC_ID_ADPCM_SWF: c_uint = 69645;
pub static CODEC_ID_ADPCM_YAMAHA: c_uint = 69646;
pub static CODEC_ID_ADPCM_SBPRO_4: c_uint = 69647;
pub static CODEC_ID_ADPCM_SBPRO_3: c_uint = 69648;
pub static CODEC_ID_ADPCM_SBPRO_2: c_uint = 69649;
pub static CODEC_ID_ADPCM_THP: c_uint = 69650;
pub static CODEC_ID_ADPCM_IMA_AMV: c_uint = 69651;
pub static CODEC_ID_ADPCM_EA_R1: c_uint = 69652;
pub static CODEC_ID_ADPCM_EA_R3: c_uint = 69653;
pub static CODEC_ID_ADPCM_EA_R2: c_uint = 69654;
pub static CODEC_ID_ADPCM_IMA_EA_SEAD: c_uint = 69655;
pub static CODEC_ID_ADPCM_IMA_EA_EACS: c_uint = 69656;
pub static CODEC_ID_ADPCM_EA_XAS: c_uint = 69657;
pub static CODEC_ID_ADPCM_EA_MAXIS_XA: c_uint = 69658;
pub static CODEC_ID_ADPCM_IMA_ISS: c_uint = 69659;
pub static CODEC_ID_ADPCM_G722: c_uint = 69660;
pub static CODEC_ID_ADPCM_IMA_APC: c_uint = 69661;
pub static CODEC_ID_VIMA: c_uint = 1447644481;
pub static CODEC_ID_AMR_NB: c_uint = 73728;
pub static CODEC_ID_AMR_WB: c_uint = 73729;
pub static CODEC_ID_RA_144: c_uint = 77824;
pub static CODEC_ID_RA_288: c_uint = 77825;
pub static CODEC_ID_ROQ_DPCM: c_uint = 81920;
pub static CODEC_ID_INTERPLAY_DPCM: c_uint = 81921;
pub static CODEC_ID_XAN_DPCM: c_uint = 81922;
pub static CODEC_ID_SOL_DPCM: c_uint = 81923;
pub static CODEC_ID_MP2: c_uint = 86016;
pub static CODEC_ID_MP3: c_uint = 86017;
pub static CODEC_ID_AAC: c_uint = 86018;
pub static CODEC_ID_AC3: c_uint = 86019;
pub static CODEC_ID_DTS: c_uint = 86020;
pub static CODEC_ID_VORBIS: c_uint = 86021;
pub static CODEC_ID_DVAUDIO: c_uint = 86022;
pub static CODEC_ID_WMAV1: c_uint = 86023;
pub static CODEC_ID_WMAV2: c_uint = 86024;
pub static CODEC_ID_MACE3: c_uint = 86025;
pub static CODEC_ID_MACE6: c_uint = 86026;
pub static CODEC_ID_VMDAUDIO: c_uint = 86027;
pub static CODEC_ID_FLAC: c_uint = 86028;
pub static CODEC_ID_MP3ADU: c_uint = 86029;
pub static CODEC_ID_MP3ON4: c_uint = 86030;
pub static CODEC_ID_SHORTEN: c_uint = 86031;
pub static CODEC_ID_ALAC: c_uint = 86032;
pub static CODEC_ID_WESTWOOD_SND1: c_uint = 86033;
pub static CODEC_ID_GSM: c_uint = 86034;
pub static CODEC_ID_QDM2: c_uint = 86035;
pub static CODEC_ID_COOK: c_uint = 86036;
pub static CODEC_ID_TRUESPEECH: c_uint = 86037;
pub static CODEC_ID_TTA: c_uint = 86038;
pub static CODEC_ID_SMACKAUDIO: c_uint = 86039;
pub static CODEC_ID_QCELP: c_uint = 86040;
pub static CODEC_ID_WAVPACK: c_uint = 86041;
pub static CODEC_ID_DSICINAUDIO: c_uint = 86042;
pub static CODEC_ID_IMC: c_uint = 86043;
pub static CODEC_ID_MUSEPACK7: c_uint = 86044;
pub static CODEC_ID_MLP: c_uint = 86045;
pub static CODEC_ID_GSM_MS: c_uint = 86046;
pub static CODEC_ID_ATRAC3: c_uint = 86047;
pub static CODEC_ID_VOXWARE: c_uint = 86048;
pub static CODEC_ID_APE: c_uint = 86049;
pub static CODEC_ID_NELLYMOSER: c_uint = 86050;
pub static CODEC_ID_MUSEPACK8: c_uint = 86051;
pub static CODEC_ID_SPEEX: c_uint = 86052;
pub static CODEC_ID_WMAVOICE: c_uint = 86053;
pub static CODEC_ID_WMAPRO: c_uint = 86054;
pub static CODEC_ID_WMALOSSLESS: c_uint = 86055;
pub static CODEC_ID_ATRAC3P: c_uint = 86056;
pub static CODEC_ID_EAC3: c_uint = 86057;
pub static CODEC_ID_SIPR: c_uint = 86058;
pub static CODEC_ID_MP1: c_uint = 86059;
pub static CODEC_ID_TWINVQ: c_uint = 86060;
pub static CODEC_ID_TRUEHD: c_uint = 86061;
pub static CODEC_ID_MP4ALS: c_uint = 86062;
pub static CODEC_ID_ATRAC1: c_uint = 86063;
pub static CODEC_ID_BINKAUDIO_RDFT: c_uint = 86064;
pub static CODEC_ID_BINKAUDIO_DCT: c_uint = 86065;
pub static CODEC_ID_AAC_LATM: c_uint = 86066;
pub static CODEC_ID_QDMC: c_uint = 86067;
pub static CODEC_ID_CELT: c_uint = 86068;
pub static CODEC_ID_G723_1: c_uint = 86069;
pub static CODEC_ID_G729: c_uint = 86070;
pub static CODEC_ID_8SVX_EXP: c_uint = 86071;
pub static CODEC_ID_8SVX_FIB: c_uint = 86072;
pub static CODEC_ID_BMV_AUDIO: c_uint = 86073;
pub static CODEC_ID_RALF: c_uint = 86074;
pub static CODEC_ID_IAC: c_uint = 86075;
pub static CODEC_ID_ILBC: c_uint = 86076;
pub static CODEC_ID_FFWAVESYNTH: c_uint = 1179014995;
pub static CODEC_ID_8SVX_RAW: c_uint = 944985688;
pub static CODEC_ID_SONIC: c_uint = 1397706307;
pub static CODEC_ID_SONIC_LS: c_uint = 1397706316;
pub static CODEC_ID_PAF_AUDIO: c_uint = 1346455105;
pub static CODEC_ID_OPUS: c_uint = 1330664787;
pub static CODEC_ID_FIRST_SUBTITLE: c_uint = 94208;
pub static CODEC_ID_DVD_SUBTITLE: c_uint = 94208;
pub static CODEC_ID_DVB_SUBTITLE: c_uint = 94209;
pub static CODEC_ID_TEXT: c_uint = 94210;
pub static CODEC_ID_XSUB: c_uint = 94211;
pub static CODEC_ID_SSA: c_uint = 94212;
pub static CODEC_ID_MOV_TEXT: c_uint = 94213;
pub static CODEC_ID_HDMV_PGS_SUBTITLE: c_uint = 94214;
pub static CODEC_ID_DVB_TELETEXT: c_uint = 94215;
pub static CODEC_ID_SRT: c_uint = 94216;
pub static CODEC_ID_MICRODVD: c_uint = 1833195076;
pub static CODEC_ID_EIA_608: c_uint = 1664495672;
pub static CODEC_ID_JACOSUB: c_uint = 1246975298;
pub static CODEC_ID_SAMI: c_uint = 1396788553;
pub static CODEC_ID_REALTEXT: c_uint = 1381259348;
pub static CODEC_ID_SUBVIEWER: c_uint = 1400201814;
pub static CODEC_ID_FIRST_UNKNOWN: c_uint = 98304;
pub static CODEC_ID_TTF: c_uint = 98304;
pub static CODEC_ID_BINTEXT: c_uint = 1112823892;
pub static CODEC_ID_XBIN: c_uint = 1480739150;
pub static CODEC_ID_IDF: c_uint = 4801606;
pub static CODEC_ID_OTF: c_uint = 5198918;
pub static CODEC_ID_PROBE: c_uint = 102400;
pub static CODEC_ID_MPEG2TS: c_uint = 131072;
pub static CODEC_ID_MPEG4SYSTEMS: c_uint = 131073;
pub static CODEC_ID_FFMETADATA: c_uint = 135168;
pub struct Struct_AVCodecDescriptor {
    pub id: Enum_AVCodecID,
    _type: avutil::Enum_AVMediaType,
    pub name: *c_schar,
    pub long_name: *c_schar,
    pub props: c_int,
}
pub type AVCodecDescriptor = Struct_AVCodecDescriptor;
pub type Enum_Motion_Est_ID = c_uint;
pub static ME_ZERO: c_uint = 1;
pub static ME_FULL: c_uint = 2;
pub static ME_LOG: c_uint = 3;
pub static ME_PHODS: c_uint = 4;
pub static ME_EPZS: c_uint = 5;
pub static ME_X1: c_uint = 6;
pub static ME_HEX: c_uint = 7;
pub static ME_UMH: c_uint = 8;
pub static ME_ITER: c_uint = 9;
pub static ME_TESA: c_uint = 10;
pub type Enum_AVDiscard = c_int;
pub static AVDISCARD_NONE: c_int = -16;
pub static AVDISCARD_DEFAULT: c_int = 0;
pub static AVDISCARD_NONREF: c_int = 8;
pub static AVDISCARD_BIDIR: c_int = 16;
pub static AVDISCARD_NONKEY: c_int = 32;
pub static AVDISCARD_ALL: c_int = 48;
pub type Enum_AVColorPrimaries = c_uint;
pub static AVCOL_PRI_BT709: c_uint = 1;
pub static AVCOL_PRI_UNSPECIFIED: c_uint = 2;
pub static AVCOL_PRI_BT470M: c_uint = 4;
pub static AVCOL_PRI_BT470BG: c_uint = 5;
pub static AVCOL_PRI_SMPTE170M: c_uint = 6;
pub static AVCOL_PRI_SMPTE240M: c_uint = 7;
pub static AVCOL_PRI_FILM: c_uint = 8;
pub static AVCOL_PRI_NB: c_uint = 9;
pub type Enum_AVColorTransferCharacteristic = c_uint;
pub static AVCOL_TRC_BT709: c_uint = 1;
pub static AVCOL_TRC_UNSPECIFIED: c_uint = 2;
pub static AVCOL_TRC_GAMMA22: c_uint = 4;
pub static AVCOL_TRC_GAMMA28: c_uint = 5;
pub static AVCOL_TRC_SMPTE240M: c_uint = 7;
pub static AVCOL_TRC_NB: c_uint = 8;
pub type Enum_AVColorSpace = c_uint;
pub static AVCOL_SPC_RGB: c_uint = 0;
pub static AVCOL_SPC_BT709: c_uint = 1;
pub static AVCOL_SPC_UNSPECIFIED: c_uint = 2;
pub static AVCOL_SPC_FCC: c_uint = 4;
pub static AVCOL_SPC_BT470BG: c_uint = 5;
pub static AVCOL_SPC_SMPTE170M: c_uint = 6;
pub static AVCOL_SPC_SMPTE240M: c_uint = 7;
pub static AVCOL_SPC_YCOCG: c_uint = 8;
pub static AVCOL_SPC_NB: c_uint = 9;
pub type Enum_AVColorRange = c_uint;
pub static AVCOL_RANGE_UNSPECIFIED: c_uint = 0;
pub static AVCOL_RANGE_MPEG: c_uint = 1;
pub static AVCOL_RANGE_JPEG: c_uint = 2;
pub static AVCOL_RANGE_NB: c_uint = 3;
pub type Enum_AVChromaLocation = c_uint;
pub static AVCHROMA_LOC_UNSPECIFIED: c_uint = 0;
pub static AVCHROMA_LOC_LEFT: c_uint = 1;
pub static AVCHROMA_LOC_CENTER: c_uint = 2;
pub static AVCHROMA_LOC_TOPLEFT: c_uint = 3;
pub static AVCHROMA_LOC_TOP: c_uint = 4;
pub static AVCHROMA_LOC_BOTTOMLEFT: c_uint = 5;
pub static AVCHROMA_LOC_BOTTOM: c_uint = 6;
pub static AVCHROMA_LOC_NB: c_uint = 7;
pub type Enum_AVAudioServiceType = c_uint;
pub static AV_AUDIO_SERVICE_TYPE_MAIN: c_uint = 0;
pub static AV_AUDIO_SERVICE_TYPE_EFFECTS: c_uint = 1;
pub static AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED: c_uint = 2;
pub static AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED: c_uint = 3;
pub static AV_AUDIO_SERVICE_TYPE_DIALOGUE: c_uint = 4;
pub static AV_AUDIO_SERVICE_TYPE_COMMENTARY: c_uint = 5;
pub static AV_AUDIO_SERVICE_TYPE_EMERGENCY: c_uint = 6;
pub static AV_AUDIO_SERVICE_TYPE_VOICE_OVER: c_uint = 7;
pub static AV_AUDIO_SERVICE_TYPE_KARAOKE: c_uint = 8;
pub static AV_AUDIO_SERVICE_TYPE_NB: c_uint = 9;
pub struct Struct_RcOverride {
    pub start_frame: c_int,
    pub end_frame: c_int,
    pub qscale: c_int,
    pub quality_factor: c_float,
}
pub type RcOverride = Struct_RcOverride;
pub struct Struct_AVPanScan {
    pub id: c_int,
    pub width: c_int,
    pub height: c_int,
    pub position: [[int16_t, ..2u], ..3u],
}
pub type AVPanScan = Struct_AVPanScan;
pub type Enum_AVPacketSideDataType = c_uint;
pub static AV_PKT_DATA_PALETTE: c_uint = 0;
pub static AV_PKT_DATA_NEW_EXTRADATA: c_uint = 1;
pub static AV_PKT_DATA_PARAM_CHANGE: c_uint = 2;
pub static AV_PKT_DATA_H263_MB_INFO: c_uint = 3;
pub static AV_PKT_DATA_SKIP_SAMPLES: c_uint = 70;
pub static AV_PKT_DATA_JP_DUALMONO: c_uint = 71;
pub static AV_PKT_DATA_STRINGS_METADATA: c_uint = 72;
pub static AV_PKT_DATA_SUBTITLE_POSITION: c_uint = 73;
pub static AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL: c_uint = 74;
pub struct Struct_AVPacket {
    pub pts: int64_t,
    pub dts: int64_t,
    pub data: *mut uint8_t,
    pub size: c_int,
    pub stream_index: c_int,
    pub flags: c_int,
    pub side_data: *mut Struct_Unnamed1,
    pub side_data_elems: c_int,
    pub duration: c_int,
    pub destruct: extern "C" fn(arg1: *mut Struct_AVPacket),
    _priv: *mut c_void,
    pub pos: int64_t,
    pub convergence_duration: int64_t,
}
pub struct Struct_Unnamed1 {
    pub data: *mut uint8_t,
    pub size: c_int,
    _type: Enum_AVPacketSideDataType,
}
pub type AVPacket = Struct_AVPacket;
pub type Enum_AVSideDataParamChangeFlags = c_uint;
pub static AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT: c_uint = 1;
pub static AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT: c_uint = 2;
pub static AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE: c_uint = 4;
pub static AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS: c_uint = 8;
pub struct Struct_AVFrame {
    pub data: [*mut uint8_t, ..8u],
    pub linesize: [c_int, ..8u],
    pub extended_data: *mut *mut uint8_t,
    pub width: c_int,
    pub height: c_int,
    pub nb_samples: c_int,
    pub format: c_int,
    pub key_frame: c_int,
    pub pict_type: avutil::Enum_AVPictureType,
    pub base: [*mut uint8_t, ..8u],
    pub sample_aspect_ratio: avutil::AVRational,
    pub pts: int64_t,
    pub pkt_pts: int64_t,
    pub pkt_dts: int64_t,
    pub coded_picture_number: c_int,
    pub display_picture_number: c_int,
    pub quality: c_int,
    pub reference: c_int,
    pub qscale_table: *mut int8_t,
    pub qstride: c_int,
    pub qscale_type: c_int,
    pub mbskip_table: *mut uint8_t,
    pub motion_val: [*mut c_void, ..2u],
    pub mb_type: *mut uint32_t,
    pub dct_coeff: *mut c_short,
    pub ref_index: [*mut int8_t, ..2u],
    pub opaque: *mut c_void,
    pub error: [uint64_t, ..8u],
    _type: c_int,
    pub repeat_pict: c_int,
    pub interlaced_frame: c_int,
    pub top_field_first: c_int,
    pub palette_has_changed: c_int,
    pub buffer_hints: c_int,
    pub pan_scan: *mut AVPanScan,
    pub reordered_opaque: int64_t,
    pub hwaccel_picture_private: *mut c_void,
    pub owner: *mut Struct_AVCodecContext,
    pub thread_opaque: *mut c_void,
    pub motion_subsample_log2: uint8_t,
    pub sample_rate: c_int,
    pub channel_layout: uint64_t,
    pub best_effort_timestamp: int64_t,
    pub pkt_pos: int64_t,
    pub pkt_duration: int64_t,
    pub metadata: *mut avutil::AVDictionary,
    pub decode_error_flags: c_int,
    pub channels: c_int,
    pub pkt_size: c_int,
}
pub type AVFrame = Struct_AVFrame;
pub type Struct_AVCodecInternal = c_void;
pub type Enum_AVFieldOrder = c_uint;
pub static AV_FIELD_UNKNOWN: c_uint = 0;
pub static AV_FIELD_PROGRESSIVE: c_uint = 1;
pub static AV_FIELD_TT: c_uint = 2;
pub static AV_FIELD_BB: c_uint = 3;
pub static AV_FIELD_TB: c_uint = 4;
pub static AV_FIELD_BT: c_uint = 5;
pub struct Struct_AVCodecContext {
    pub av_class: *avutil::AVClass,
    pub log_level_offset: c_int,
    pub codec_type: avutil::Enum_AVMediaType,
    pub codec: *Struct_AVCodec,
    pub codec_name: [c_schar, ..32u],
    pub codec_id: Enum_AVCodecID,
    pub codec_tag: c_uint,
    pub stream_codec_tag: c_uint,
    pub sub_id: c_int,
    pub priv_data: *mut c_void,
    pub internal: *mut Struct_AVCodecInternal,
    pub opaque: *mut c_void,
    pub bit_rate: c_int,
    pub bit_rate_tolerance: c_int,
    pub global_quality: c_int,
    pub compression_level: c_int,
    pub flags: c_int,
    pub flags2: c_int,
    pub extradata: *mut uint8_t,
    pub extradata_size: c_int,
    pub time_base: avutil::AVRational,
    pub ticks_per_frame: c_int,
    pub delay: c_int,
    pub width: c_int,
    pub height: c_int,
    pub coded_width: c_int,
    pub coded_height: c_int,
    pub gop_size: c_int,
    pub pix_fmt: avutil::Enum_AVPixelFormat,
    pub me_method: c_int,
    pub draw_horiz_band: extern "C" fn
                         (arg1: *mut Struct_AVCodecContext, arg2: *AVFrame,
                          arg3: *mut c_int, arg4: c_int, arg5: c_int,
                          arg6: c_int),
    pub get_format: extern "C" fn
                    (arg1: *mut Struct_AVCodecContext,
                     arg2: *avutil::Enum_AVPixelFormat) -> avutil::Enum_AVPixelFormat,
    pub max_b_frames: c_int,
    pub b_quant_factor: c_float,
    pub rc_strategy: c_int,
    pub b_frame_strategy: c_int,
    pub luma_elim_threshold: c_int,
    pub chroma_elim_threshold: c_int,
    pub b_quant_offset: c_float,
    pub has_b_frames: c_int,
    pub mpeg_quant: c_int,
    pub i_quant_factor: c_float,
    pub i_quant_offset: c_float,
    pub lumi_masking: c_float,
    pub temporal_cplx_masking: c_float,
    pub spatial_cplx_masking: c_float,
    pub p_masking: c_float,
    pub dark_masking: c_float,
    pub slice_count: c_int,
    pub prediction_method: c_int,
    pub slice_offset: *mut c_int,
    pub sample_aspect_ratio: avutil::AVRational,
    pub me_cmp: c_int,
    pub me_sub_cmp: c_int,
    pub mb_cmp: c_int,
    pub ildct_cmp: c_int,
    pub dia_size: c_int,
    pub last_predictor_count: c_int,
    pub pre_me: c_int,
    pub me_pre_cmp: c_int,
    pub pre_dia_size: c_int,
    pub me_subpel_quality: c_int,
    pub dtg_active_format: c_int,
    pub me_range: c_int,
    pub intra_quant_bias: c_int,
    pub inter_quant_bias: c_int,
    pub color_table_id: c_int,
    pub slice_flags: c_int,
    pub xvmc_acceleration: c_int,
    pub mb_decision: c_int,
    pub intra_matrix: *mut uint16_t,
    pub inter_matrix: *mut uint16_t,
    pub scenechange_threshold: c_int,
    pub noise_reduction: c_int,
    pub inter_threshold: c_int,
    pub quantizer_noise_shaping: c_int,
    pub me_threshold: c_int,
    pub mb_threshold: c_int,
    pub intra_dc_precision: c_int,
    pub skip_top: c_int,
    pub skip_bottom: c_int,
    pub border_masking: c_float,
    pub mb_lmin: c_int,
    pub mb_lmax: c_int,
    pub me_penalty_compensation: c_int,
    pub bidir_refine: c_int,
    pub brd_scale: c_int,
    pub keyint_min: c_int,
    pub refs: c_int,
    pub chromaoffset: c_int,
    pub scenechange_factor: c_int,
    pub mv0_threshold: c_int,
    pub b_sensitivity: c_int,
    pub color_primaries: Enum_AVColorPrimaries,
    pub color_trc: Enum_AVColorTransferCharacteristic,
    pub colorspace: Enum_AVColorSpace,
    pub color_range: Enum_AVColorRange,
    pub chroma_sample_location: Enum_AVChromaLocation,
    pub slices: c_int,
    pub field_order: Enum_AVFieldOrder,
    pub sample_rate: c_int,
    pub channels: c_int,
    pub sample_fmt: avutil::Enum_AVSampleFormat,
    pub frame_size: c_int,
    pub frame_number: c_int,
    pub block_align: c_int,
    pub cutoff: c_int,
    pub request_channels: c_int,
    pub channel_layout: uint64_t,
    pub request_channel_layout: uint64_t,
    pub audio_service_type: Enum_AVAudioServiceType,
    pub request_sample_fmt: avutil::Enum_AVSampleFormat,
    pub get_buffer: extern "C" fn
                    (arg1: *mut Struct_AVCodecContext, arg2: *mut AVFrame)
                    -> c_int,
    pub release_buffer: extern "C" fn
                        (arg1: *mut Struct_AVCodecContext,
                         arg2: *mut AVFrame),
    pub reget_buffer: extern "C" fn
                      (arg1: *mut Struct_AVCodecContext, arg2: *mut AVFrame)
                      -> c_int,
    pub qcompress: c_float,
    pub qblur: c_float,
    pub qmin: c_int,
    pub qmax: c_int,
    pub max_qdiff: c_int,
    pub rc_qsquish: c_float,
    pub rc_qmod_amp: c_float,
    pub rc_qmod_freq: c_int,
    pub rc_buffer_size: c_int,
    pub rc_override_count: c_int,
    pub rc_override: *mut RcOverride,
    pub rc_eq: *c_schar,
    pub rc_max_rate: c_int,
    pub rc_min_rate: c_int,
    pub rc_buffer_aggressivity: c_float,
    pub rc_initial_cplx: c_float,
    pub rc_max_available_vbv_use: c_float,
    pub rc_min_vbv_overflow_use: c_float,
    pub rc_initial_buffer_occupancy: c_int,
    pub coder_type: c_int,
    pub context_model: c_int,
    pub lmin: c_int,
    pub lmax: c_int,
    pub frame_skip_threshold: c_int,
    pub frame_skip_factor: c_int,
    pub frame_skip_exp: c_int,
    pub frame_skip_cmp: c_int,
    pub trellis: c_int,
    pub min_prediction_order: c_int,
    pub max_prediction_order: c_int,
    pub timecode_frame_start: int64_t,
    pub rtp_callback: extern "C" fn
                      (arg1: *mut Struct_AVCodecContext, arg2: *mut c_void,
                       arg3: c_int, arg4: c_int),
    pub rtp_payload_size: c_int,
    pub mv_bits: c_int,
    pub header_bits: c_int,
    pub i_tex_bits: c_int,
    pub p_tex_bits: c_int,
    pub i_count: c_int,
    pub p_count: c_int,
    pub skip_count: c_int,
    pub misc_bits: c_int,
    pub frame_bits: c_int,
    pub stats_out: *mut c_schar,
    pub stats_in: *mut c_schar,
    pub workaround_bugs: c_int,
    pub strict_std_compliance: c_int,
    pub error_concealment: c_int,
    pub debug: c_int,
    pub debug_mv: c_int,
    pub err_recognition: c_int,
    pub reordered_opaque: int64_t,
    pub hwaccel: *mut Struct_AVHWAccel,
    pub hwaccel_context: *mut c_void,
    pub error: [uint64_t, ..8u],
    pub dct_algo: c_int,
    pub idct_algo: c_int,
    pub dsp_mask: c_uint,
    pub bits_per_coded_sample: c_int,
    pub bits_per_raw_sample: c_int,
    pub lowres: c_int,
    pub coded_frame: *mut AVFrame,
    pub thread_count: c_int,
    pub thread_type: c_int,
    pub active_thread_type: c_int,
    pub thread_safe_callbacks: c_int,
    pub execute: extern "C" fn
                 (arg1: *mut Struct_AVCodecContext,
                  arg2:
                      extern "C" fn
                          (arg1: *mut Struct_AVCodecContext,
                           arg2: *mut c_void) -> c_int, arg3: *mut c_void,
                  arg4: *mut c_int, arg5: c_int, arg6: c_int) -> c_int,
    pub execute2: extern "C" fn
                  (arg1: *mut Struct_AVCodecContext,
                   arg2:
                       extern "C" fn
                           (arg1: *mut Struct_AVCodecContext,
                            arg2: *mut c_void, arg3: c_int, arg4: c_int)
                           -> c_int, arg3: *mut c_void, arg4: *mut c_int,
                   arg5: c_int) -> c_int,
    pub thread_opaque: *mut c_void,
    pub nsse_weight: c_int,
    pub profile: c_int,
    pub level: c_int,
    pub skip_loop_filter: Enum_AVDiscard,
    pub skip_idct: Enum_AVDiscard,
    pub skip_frame: Enum_AVDiscard,
    pub subtitle_header: *mut uint8_t,
    pub subtitle_header_size: c_int,
    pub error_rate: c_int,
    pub pkt: *mut AVPacket,
    pub vbv_delay: uint64_t,
    pub pkt_timebase: avutil::AVRational,
    pub codec_descriptor: *AVCodecDescriptor,
    pub pts_correction_num_faulty_pts: int64_t,
    pub pts_correction_num_faulty_dts: int64_t,
    pub pts_correction_last_pts: int64_t,
    pub pts_correction_last_dts: int64_t,
    pub metadata: *mut avutil::AVDictionary,
    pub sub_charenc: *mut c_schar,
    pub sub_charenc_mode: c_int,
}
pub type AVCodecContext = Struct_AVCodecContext;
pub struct Struct_AVProfile {
    pub profile: c_int,
    pub name: *c_schar,
}
pub type AVProfile = Struct_AVProfile;
pub type Struct_AVCodecDefault = c_void;
pub type AVCodecDefault = Struct_AVCodecDefault;
pub struct Struct_AVCodec {
    pub name: *c_schar,
    pub long_name: *c_schar,
    _type: avutil::Enum_AVMediaType,
    pub id: Enum_AVCodecID,
    pub capabilities: c_int,
    pub supported_framerates: *avutil::AVRational,
    pub pix_fmts: *avutil::Enum_AVPixelFormat,
    pub supported_samplerates: *c_int,
    pub sample_fmts: *avutil::Enum_AVSampleFormat,
    pub channel_layouts: *uint64_t,
    pub max_lowres: uint8_t,
    pub priv_class: *avutil::AVClass,
    pub profiles: *AVProfile,
    pub priv_data_size: c_int,
    pub next: *mut Struct_AVCodec,
    pub init_thread_copy: extern "C" fn(arg1: *mut AVCodecContext) -> c_int,
    pub update_thread_context: extern "C" fn
                               (arg1: *mut AVCodecContext,
                                arg2: *AVCodecContext) -> c_int,
    pub defaults: *AVCodecDefault,
    pub init_static_data: extern "C" fn(arg1: *mut Struct_AVCodec),
    pub init: extern "C" fn(arg1: *mut AVCodecContext) -> c_int,
    pub encode_sub: extern "C" fn
                    (arg1: *mut AVCodecContext, arg2: *mut uint8_t,
                     arg3: c_int, arg4: *Struct_AVSubtitle) -> c_int,
    pub encode2: extern "C" fn
                 (arg1: *mut AVCodecContext, arg2: *mut AVPacket,
                  arg3: *AVFrame, arg4: *mut c_int) -> c_int,
    pub decode: extern "C" fn
                (arg1: *mut AVCodecContext, arg2: *mut c_void,
                 arg3: *mut c_int, arg4: *mut AVPacket) -> c_int,
    pub close: extern "C" fn(arg1: *mut AVCodecContext) -> c_int,
    pub flush: extern "C" fn(arg1: *mut AVCodecContext),
}
pub type AVCodec = Struct_AVCodec;
pub struct Struct_AVHWAccel {
    pub name: *c_schar,
    _type: avutil::Enum_AVMediaType,
    pub id: Enum_AVCodecID,
    pub pix_fmt: avutil::Enum_AVPixelFormat,
    pub capabilities: c_int,
    pub next: *mut Struct_AVHWAccel,
    pub start_frame: extern "C" fn
                     (arg1: *mut AVCodecContext, arg2: *uint8_t,
                      arg3: uint32_t) -> c_int,
    pub decode_slice: extern "C" fn
                      (arg1: *mut AVCodecContext, arg2: *uint8_t,
                       arg3: uint32_t) -> c_int,
    pub end_frame: extern "C" fn(arg1: *mut AVCodecContext) -> c_int,
    pub priv_data_size: c_int,
}
pub type AVHWAccel = Struct_AVHWAccel;
pub struct Struct_AVPicture {
    pub data: [*mut uint8_t, ..8u],
    pub linesize: [c_int, ..8u],
}
pub type AVPicture = Struct_AVPicture;
pub type Enum_AVSubtitleType = c_uint;
pub static SUBTITLE_NONE: c_uint = 0;
pub static SUBTITLE_BITMAP: c_uint = 1;
pub static SUBTITLE_TEXT: c_uint = 2;
pub static SUBTITLE_ASS: c_uint = 3;
pub struct Struct_AVSubtitleRect {
    pub x: c_int,
    pub y: c_int,
    pub w: c_int,
    pub h: c_int,
    pub nb_colors: c_int,
    pub pict: AVPicture,
    _type: Enum_AVSubtitleType,
    pub text: *mut c_schar,
    pub ass: *mut c_schar,
    pub flags: c_int,
}
pub type AVSubtitleRect = Struct_AVSubtitleRect;
pub struct Struct_AVSubtitle {
    pub format: uint16_t,
    pub start_display_time: uint32_t,
    pub end_display_time: uint32_t,
    pub num_rects: c_uint,
    pub rects: *mut *mut AVSubtitleRect,
    pub pts: int64_t,
}
pub type AVSubtitle = Struct_AVSubtitle;
pub struct Struct_AVCodecParserContext {
    pub priv_data: *mut c_void,
    pub parser: *mut Struct_AVCodecParser,
    pub frame_offset: int64_t,
    pub cur_offset: int64_t,
    pub next_frame_offset: int64_t,
    pub pict_type: c_int,
    pub repeat_pict: c_int,
    pub pts: int64_t,
    pub dts: int64_t,
    pub last_pts: int64_t,
    pub last_dts: int64_t,
    pub fetch_timestamp: c_int,
    pub cur_frame_start_index: c_int,
    pub cur_frame_offset: [int64_t, ..4u],
    pub cur_frame_pts: [int64_t, ..4u],
    pub cur_frame_dts: [int64_t, ..4u],
    pub flags: c_int,
    pub offset: int64_t,
    pub cur_frame_end: [int64_t, ..4u],
    pub key_frame: c_int,
    pub convergence_duration: int64_t,
    pub dts_sync_point: c_int,
    pub dts_ref_dts_delta: c_int,
    pub pts_dts_delta: c_int,
    pub cur_frame_pos: [int64_t, ..4u],
    pub pos: int64_t,
    pub last_pos: int64_t,
    pub duration: c_int,
}
pub type AVCodecParserContext = Struct_AVCodecParserContext;
pub struct Struct_AVCodecParser {
    pub codec_ids: [c_int, ..5u],
    pub priv_data_size: c_int,
    pub parser_init: extern "C" fn(arg1: *mut AVCodecParserContext) -> c_int,
    pub parser_parse: extern "C" fn
                      (arg1: *mut AVCodecParserContext,
                       arg2: *mut AVCodecContext, arg3: *mut *uint8_t,
                       arg4: *mut c_int, arg5: *uint8_t, arg6: c_int)
                      -> c_int,
    pub parser_close: extern "C" fn(arg1: *mut AVCodecParserContext),
    pub split: extern "C" fn
               (arg1: *mut AVCodecContext, arg2: *uint8_t, arg3: c_int)
               -> c_int,
    pub next: *mut Struct_AVCodecParser,
}
pub type AVCodecParser = Struct_AVCodecParser;
pub type Struct_ReSampleContext = c_void;
pub type Struct_AVResampleContext = c_void;
pub type ReSampleContext = Struct_ReSampleContext;
pub struct Struct_AVBitStreamFilterContext {
    pub priv_data: *mut c_void,
    pub filter: *mut Struct_AVBitStreamFilter,
    pub parser: *mut AVCodecParserContext,
    pub next: *mut Struct_AVBitStreamFilterContext,
}
pub type AVBitStreamFilterContext = Struct_AVBitStreamFilterContext;
pub struct Struct_AVBitStreamFilter {
    pub name: *c_schar,
    pub priv_data_size: c_int,
    pub filter: extern "C" fn
                (arg1: *mut AVBitStreamFilterContext,
                 arg2: *mut AVCodecContext, arg3: *c_schar,
                 arg4: *mut *mut uint8_t, arg5: *mut c_int, arg6: *uint8_t,
                 arg7: c_int, arg8: c_int) -> c_int,
    pub close: extern "C" fn(arg1: *mut AVBitStreamFilterContext),
    pub next: *mut Struct_AVBitStreamFilter,
}
pub type AVBitStreamFilter = Struct_AVBitStreamFilter;
pub type Enum_AVLockOp = c_uint;
pub static AV_LOCK_CREATE: c_uint = 0;
pub static AV_LOCK_OBTAIN: c_uint = 1;
pub static AV_LOCK_RELEASE: c_uint = 2;
pub static AV_LOCK_DESTROY: c_uint = 3;
pub type __va_list_tag = Struct___va_list_tag;
pub struct Struct___va_list_tag {
    pub gp_offset: c_uint,
    pub fp_offset: c_uint,
    pub overflow_arg_area: *mut c_void,
    pub reg_save_area: *mut c_void,
}
#[link(name = "avcodec")]
extern "C" {
    pub fn av_frame_get_best_effort_timestamp(frame: *AVFrame) -> int64_t;
    pub fn av_frame_set_best_effort_timestamp(frame: *mut AVFrame,
                                              val: int64_t);
    pub fn av_frame_get_pkt_duration(frame: *AVFrame) -> int64_t;
    pub fn av_frame_set_pkt_duration(frame: *mut AVFrame, val: int64_t);
    pub fn av_frame_get_pkt_pos(frame: *AVFrame) -> int64_t;
    pub fn av_frame_set_pkt_pos(frame: *mut AVFrame, val: int64_t);
    pub fn av_frame_get_channel_layout(frame: *AVFrame) -> int64_t;
    pub fn av_frame_set_channel_layout(frame: *mut AVFrame, val: int64_t);
    pub fn av_frame_get_channels(frame: *AVFrame) -> c_int;
    pub fn av_frame_set_channels(frame: *mut AVFrame, val: c_int);
    pub fn av_frame_get_sample_rate(frame: *AVFrame) -> c_int;
    pub fn av_frame_set_sample_rate(frame: *mut AVFrame, val: c_int);
    pub fn av_frame_get_metadata(frame: *AVFrame) -> *mut avutil::AVDictionary;
    pub fn av_frame_set_metadata(frame: *mut AVFrame, val: *mut avutil::AVDictionary);
    pub fn av_frame_get_decode_error_flags(frame: *AVFrame) -> c_int;
    pub fn av_frame_set_decode_error_flags(frame: *mut AVFrame, val: c_int);
    pub fn av_frame_get_pkt_size(frame: *AVFrame) -> c_int;
    pub fn av_frame_set_pkt_size(frame: *mut AVFrame, val: c_int);
    pub fn av_codec_get_pkt_timebase(avctx: *AVCodecContext) -> avutil::AVRational;
    pub fn av_codec_set_pkt_timebase(avctx: *mut AVCodecContext,
                                     val: avutil::AVRational);
    pub fn av_codec_get_codec_descriptor(avctx: *AVCodecContext) ->
     *AVCodecDescriptor;
    pub fn av_codec_set_codec_descriptor(avctx: *mut AVCodecContext,
                                         desc: *AVCodecDescriptor);
    pub fn av_codec_next(c: *AVCodec) -> *mut AVCodec;
    pub fn avcodec_version() -> c_uint;
    pub fn avcodec_configuration() -> *c_schar;
    pub fn avcodec_license() -> *c_schar;
    pub fn avcodec_register(codec: *mut AVCodec);
    pub fn avcodec_register_all();
    pub fn avcodec_alloc_context() -> *mut AVCodecContext;
    pub fn avcodec_alloc_context2(arg1: avutil::Enum_AVMediaType) ->
     *mut AVCodecContext;
    pub fn avcodec_get_context_defaults(s: *mut AVCodecContext);
    pub fn avcodec_get_context_defaults2(s: *mut AVCodecContext,
                                         arg1: avutil::Enum_AVMediaType);
    pub fn avcodec_alloc_context3(codec: *AVCodec) -> *mut AVCodecContext;
    pub fn avcodec_get_context_defaults3(s: *mut AVCodecContext,
                                         codec: *AVCodec) -> c_int;
    pub fn avcodec_get_class() -> *avutil::AVClass;
    pub fn avcodec_get_frame_class() -> *avutil::AVClass;
    pub fn avcodec_get_subtitle_rect_class() -> *avutil::AVClass;
    pub fn avcodec_copy_context(dest: *mut AVCodecContext,
                                src: *AVCodecContext) -> c_int;
    pub fn avcodec_alloc_frame() -> *mut AVFrame;
    pub fn avcodec_get_frame_defaults(frame: *mut AVFrame);
    pub fn avcodec_free_frame(frame: *mut *mut AVFrame);
    pub fn avcodec_open(avctx: *mut AVCodecContext, codec: *mut AVCodec) ->
     c_int;
    pub fn avcodec_open2(avctx: *mut AVCodecContext, codec: *AVCodec,
                         options: *mut *mut avutil::AVDictionary) -> c_int;
    pub fn avcodec_close(avctx: *mut AVCodecContext) -> c_int;
    pub fn avsubtitle_free(sub: *mut AVSubtitle);
    pub fn av_destruct_packet(pkt: *mut AVPacket);
    pub fn av_init_packet(pkt: *mut AVPacket);
    pub fn av_new_packet(pkt: *mut AVPacket, size: c_int) -> c_int;
    pub fn av_shrink_packet(pkt: *mut AVPacket, size: c_int);
    pub fn av_grow_packet(pkt: *mut AVPacket, grow_by: c_int) -> c_int;
    pub fn av_dup_packet(pkt: *mut AVPacket) -> c_int;
    pub fn av_copy_packet(dst: *mut AVPacket, src: *mut AVPacket) -> c_int;
    pub fn av_free_packet(pkt: *mut AVPacket);
    pub fn av_packet_new_side_data(pkt: *mut AVPacket,
                                   _type: Enum_AVPacketSideDataType,
                                   size: c_int) -> *mut uint8_t;
    pub fn av_packet_shrink_side_data(pkt: *mut AVPacket,
                                      _type: Enum_AVPacketSideDataType,
                                      size: c_int) -> c_int;
    pub fn av_packet_get_side_data(pkt: *mut AVPacket,
                                   _type: Enum_AVPacketSideDataType,
                                   size: *mut c_int) -> *mut uint8_t;
    pub fn av_packet_merge_side_data(pkt: *mut AVPacket) -> c_int;
    pub fn av_packet_split_side_data(pkt: *mut AVPacket) -> c_int;
    pub fn avcodec_find_decoder(id: Enum_AVCodecID) -> *mut AVCodec;
    pub fn avcodec_find_decoder_by_name(name: *c_schar) -> *mut AVCodec;
    pub fn avcodec_default_get_buffer(s: *mut AVCodecContext,
                                      pic: *mut AVFrame) -> c_int;
    pub fn avcodec_default_release_buffer(s: *mut AVCodecContext,
                                          pic: *mut AVFrame);
    pub fn avcodec_default_reget_buffer(s: *mut AVCodecContext,
                                        pic: *mut AVFrame) -> c_int;
    pub fn avcodec_get_edge_width() -> c_uint;
    pub fn avcodec_align_dimensions(s: *mut AVCodecContext, width: *mut c_int,
                                    height: *mut c_int);
    pub fn avcodec_align_dimensions2(s: *mut AVCodecContext,
                                     width: *mut c_int, height: *mut c_int,
                                     linesize_align: [c_int, ..8u]);
    pub fn avcodec_decode_audio3(avctx: *mut AVCodecContext,
                                 samples: *mut int16_t,
                                 frame_size_ptr: *mut c_int,
                                 avpkt: *mut AVPacket) -> c_int;
    pub fn avcodec_decode_audio4(avctx: *mut AVCodecContext,
                                 frame: *mut AVFrame,
                                 got_frame_ptr: *mut c_int, avpkt: *AVPacket)
     -> c_int;
    pub fn avcodec_decode_video2(avctx: *mut AVCodecContext,
                                 picture: *mut AVFrame,
                                 got_picture_ptr: *mut c_int,
                                 avpkt: *AVPacket) -> c_int;
    pub fn avcodec_decode_subtitle2(avctx: *mut AVCodecContext,
                                    sub: *mut AVSubtitle,
                                    got_sub_ptr: *mut c_int,
                                    avpkt: *mut AVPacket) -> c_int;
    pub fn av_parser_next(c: *mut AVCodecParser) -> *mut AVCodecParser;
    pub fn av_register_codec_parser(parser: *mut AVCodecParser);
    pub fn av_parser_init(codec_id: c_int) -> *mut AVCodecParserContext;
    pub fn av_parser_parse2(s: *mut AVCodecParserContext,
                            avctx: *mut AVCodecContext,
                            poutbuf: *mut *mut uint8_t,
                            poutbuf_size: *mut c_int, buf: *uint8_t,
                            buf_size: c_int, pts: int64_t, dts: int64_t,
                            pos: int64_t) -> c_int;
    pub fn av_parser_change(s: *mut AVCodecParserContext,
                            avctx: *mut AVCodecContext,
                            poutbuf: *mut *mut uint8_t,
                            poutbuf_size: *mut c_int, buf: *uint8_t,
                            buf_size: c_int, keyframe: c_int) -> c_int;
    pub fn av_parser_close(s: *mut AVCodecParserContext);
    pub fn avcodec_find_encoder(id: Enum_AVCodecID) -> *mut AVCodec;
    pub fn avcodec_find_encoder_by_name(name: *c_schar) -> *mut AVCodec;
    pub fn avcodec_encode_audio(avctx: *mut AVCodecContext, buf: *mut uint8_t,
                                buf_size: c_int, samples: *c_short) -> c_int;
    pub fn avcodec_encode_audio2(avctx: *mut AVCodecContext,
                                 avpkt: *mut AVPacket, frame: *AVFrame,
                                 got_packet_ptr: *mut c_int) -> c_int;
    pub fn avcodec_encode_video(avctx: *mut AVCodecContext, buf: *mut uint8_t,
                                buf_size: c_int, pict: *AVFrame) -> c_int;
    pub fn avcodec_encode_video2(avctx: *mut AVCodecContext,
                                 avpkt: *mut AVPacket, frame: *AVFrame,
                                 got_packet_ptr: *mut c_int) -> c_int;
    pub fn avcodec_encode_subtitle(avctx: *mut AVCodecContext,
                                   buf: *mut uint8_t, buf_size: c_int,
                                   sub: *AVSubtitle) -> c_int;
    pub fn av_audio_resample_init(output_channels: c_int,
                                  input_channels: c_int, output_rate: c_int,
                                  input_rate: c_int,
                                  sample_fmt_out: avutil::Enum_AVSampleFormat,
                                  sample_fmt_in: avutil::Enum_AVSampleFormat,
                                  filter_length: c_int,
                                  log2_phase_count: c_int, linear: c_int,
                                  cutoff: c_double) -> *mut ReSampleContext;
    pub fn audio_resample(s: *mut ReSampleContext, output: *mut c_short,
                          input: *mut c_short, nb_samples: c_int) -> c_int;
    pub fn audio_resample_close(s: *mut ReSampleContext);
    pub fn av_resample_init(out_rate: c_int, in_rate: c_int,
                            filter_length: c_int, log2_phase_count: c_int,
                            linear: c_int, cutoff: c_double) ->
     *mut Struct_AVResampleContext;
    pub fn av_resample(c: *mut Struct_AVResampleContext, dst: *mut c_short,
                       src: *mut c_short, consumed: *mut c_int,
                       src_size: c_int, dst_size: c_int, update_ctx: c_int) ->
     c_int;
    pub fn av_resample_compensate(c: *mut Struct_AVResampleContext,
                                  sample_delta: c_int,
                                  compensation_distance: c_int);
    pub fn av_resample_close(c: *mut Struct_AVResampleContext);
    pub fn avpicture_alloc(picture: *mut AVPicture,
                           pix_fmt: avutil::Enum_AVPixelFormat, width: c_int,
                           height: c_int) -> c_int;
    pub fn avpicture_free(picture: *mut AVPicture);
    pub fn avpicture_fill(picture: *mut AVPicture, ptr: *uint8_t,
                          pix_fmt: avutil::Enum_AVPixelFormat, width: c_int,
                          height: c_int) -> c_int;
    pub fn avpicture_layout(src: *AVPicture, pix_fmt: avutil::Enum_AVPixelFormat,
                            width: c_int, height: c_int, dest: *mut c_uchar,
                            dest_size: c_int) -> c_int;
    pub fn avpicture_get_size(pix_fmt: avutil::Enum_AVPixelFormat, width: c_int,
                              height: c_int) -> c_int;
    pub fn avpicture_deinterlace(dst: *mut AVPicture, src: *AVPicture,
                                 pix_fmt: avutil::Enum_AVPixelFormat, width: c_int,
                                 height: c_int) -> c_int;
    pub fn av_picture_copy(dst: *mut AVPicture, src: *AVPicture,
                           pix_fmt: avutil::Enum_AVPixelFormat, width: c_int,
                           height: c_int);
    pub fn av_picture_crop(dst: *mut AVPicture, src: *AVPicture,
                           pix_fmt: avutil::Enum_AVPixelFormat, top_band: c_int,
                           left_band: c_int) -> c_int;
    pub fn av_picture_pad(dst: *mut AVPicture, src: *AVPicture, height: c_int,
                          width: c_int, pix_fmt: avutil::Enum_AVPixelFormat,
                          padtop: c_int, padbottom: c_int, padleft: c_int,
                          padright: c_int, color: *mut c_int) -> c_int;
    pub fn avcodec_get_chroma_sub_sample(pix_fmt: avutil::Enum_AVPixelFormat,
                                         h_shift: *mut c_int,
                                         v_shift: *mut c_int);
    pub fn avcodec_pix_fmt_to_codec_tag(pix_fmt: avutil::Enum_AVPixelFormat) ->
     c_uint;
    pub fn avcodec_get_pix_fmt_loss(dst_pix_fmt: avutil::Enum_AVPixelFormat,
                                    src_pix_fmt:avutil:: Enum_AVPixelFormat,
                                    has_alpha: c_int) -> c_int;
    pub fn avcodec_find_best_pix_fmt(pix_fmt_mask: int64_t,
                                     src_pix_fmt: avutil::Enum_AVPixelFormat,
                                     has_alpha: c_int, loss_ptr: *mut c_int)
     -> avutil::Enum_AVPixelFormat;
    pub fn avcodec_find_best_pix_fmt_of_list(pix_fmt_list:
                                                 *mut avutil::Enum_AVPixelFormat,
                                             src_pix_fmt: avutil::Enum_AVPixelFormat,
                                             has_alpha: c_int,
                                             loss_ptr: *mut c_int) ->
     avutil::Enum_AVPixelFormat;
    pub fn avcodec_find_best_pix_fmt_of_2(dst_pix_fmt1: avutil::Enum_AVPixelFormat,
                                          dst_pix_fmt2: avutil::Enum_AVPixelFormat,
                                          src_pix_fmt: avutil::Enum_AVPixelFormat,
                                          has_alpha: c_int,
                                          loss_ptr: *mut c_int) ->
     avutil::Enum_AVPixelFormat;
    pub fn avcodec_find_best_pix_fmt2(dst_pix_fmt1: avutil::Enum_AVPixelFormat,
                                      dst_pix_fmt2: avutil::Enum_AVPixelFormat,
                                      src_pix_fmt: avutil::Enum_AVPixelFormat,
                                      has_alpha: c_int, loss_ptr: *mut c_int)
     -> avutil::Enum_AVPixelFormat;
    pub fn avcodec_default_get_format(s: *mut Struct_AVCodecContext,
                                      fmt: *avutil::Enum_AVPixelFormat) ->
     avutil::Enum_AVPixelFormat;
    pub fn avcodec_set_dimensions(s: *mut AVCodecContext, width: c_int,
                                  height: c_int);
    pub fn av_get_codec_tag_string(buf: *mut c_schar, buf_size: size_t,
                                   codec_tag: c_uint) -> size_t;
    pub fn avcodec_string(buf: *mut c_schar, buf_size: c_int,
                          enc: *mut AVCodecContext, encode: c_int);
    pub fn av_get_profile_name(codec: *AVCodec, profile: c_int) -> *c_schar;
    pub fn avcodec_default_execute(c: *mut AVCodecContext,
                                   func:
                                       extern "C" fn
                                           (arg1: *mut AVCodecContext,
                                            arg2: *mut c_void) -> c_int,
                                   arg: *mut c_void, ret: *mut c_int,
                                   count: c_int, size: c_int) -> c_int;
    pub fn avcodec_default_execute2(c: *mut AVCodecContext,
                                    func:
                                        extern "C" fn
                                            (arg1: *mut AVCodecContext,
                                             arg2: *mut c_void, arg3: c_int,
                                             arg4: c_int) -> c_int,
                                    arg: *mut c_void, ret: *mut c_int,
                                    count: c_int) -> c_int;
    pub fn avcodec_fill_audio_frame(frame: *mut AVFrame, nb_channels: c_int,
                                    sample_fmt: avutil::Enum_AVSampleFormat,
                                    buf: *uint8_t, buf_size: c_int,
                                    align: c_int) -> c_int;
    pub fn avcodec_flush_buffers(avctx: *mut AVCodecContext);
    pub fn avcodec_default_free_buffers(s: *mut AVCodecContext);
    pub fn av_get_bits_per_sample(codec_id: Enum_AVCodecID) -> c_int;
    pub fn av_get_pcm_codec(fmt: avutil::Enum_AVSampleFormat, _be: c_int) ->
     Enum_AVCodecID;
    pub fn av_get_exact_bits_per_sample(codec_id: Enum_AVCodecID) -> c_int;
    pub fn av_get_audio_frame_duration(avctx: *mut AVCodecContext,
                                       frame_bytes: c_int) -> c_int;
    pub fn av_register_bitstream_filter(bsf: *mut AVBitStreamFilter);
    pub fn av_bitstream_filter_init(name: *c_schar) ->
     *mut AVBitStreamFilterContext;
    pub fn av_bitstream_filter_filter(bsfc: *mut AVBitStreamFilterContext,
                                      avctx: *mut AVCodecContext,
                                      args: *c_schar,
                                      poutbuf: *mut *mut uint8_t,
                                      poutbuf_size: *mut c_int, buf: *uint8_t,
                                      buf_size: c_int, keyframe: c_int) ->
     c_int;
    pub fn av_bitstream_filter_close(bsf: *mut AVBitStreamFilterContext);
    pub fn av_bitstream_filter_next(f: *mut AVBitStreamFilter) ->
     *mut AVBitStreamFilter;
    pub fn av_fast_realloc(ptr: *mut c_void, size: *mut c_uint,
                           min_size: size_t) -> *mut c_void;
    pub fn av_fast_malloc(ptr: *mut c_void, size: *mut c_uint,
                          min_size: size_t);
    pub fn av_fast_padded_malloc(ptr: *mut c_void, size: *mut c_uint,
                                 min_size: size_t);
    pub fn av_fast_padded_mallocz(ptr: *mut c_void, size: *mut c_uint,
                                  min_size: size_t);
    pub fn av_xiphlacing(s: *mut c_uchar, v: c_uint) -> c_uint;
    pub fn av_log_missing_feature(avc: *mut c_void, feature: *c_schar,
                                  want_sample: c_int);
    pub fn av_log_ask_for_sample(avc: *mut c_void, msg: *c_schar, ...);
    pub fn av_register_hwaccel(hwaccel: *mut AVHWAccel);
    pub fn av_hwaccel_next(hwaccel: *mut AVHWAccel) -> *mut AVHWAccel;
    pub fn av_lockmgr_register(cb:
                                   extern "C" fn
                                       (arg1: *mut *mut c_void,
                                        arg2: Enum_AVLockOp) -> c_int) ->
     c_int;
    pub fn avcodec_get_type(codec_id: Enum_AVCodecID) -> avutil::Enum_AVMediaType;
    pub fn avcodec_get_name(id: Enum_AVCodecID) -> *c_schar;
    pub fn avcodec_is_open(s: *mut AVCodecContext) -> c_int;
    pub fn av_codec_is_encoder(codec: *AVCodec) -> c_int;
    pub fn av_codec_is_decoder(codec: *AVCodec) -> c_int;
    pub fn avcodec_descriptor_get(id: Enum_AVCodecID) -> *AVCodecDescriptor;
    pub fn avcodec_descriptor_next(prev: *AVCodecDescriptor) ->
     *AVCodecDescriptor;
    pub fn avcodec_descriptor_get_by_name(name: *c_schar) ->
     *AVCodecDescriptor;
}

pub fn version() -> uint {
    unsafe {
        avcodec_version() as uint
    }
}
pub fn license() -> ~str {
    unsafe {
        std::str::raw::from_c_str(avcodec_license())
    }
}
